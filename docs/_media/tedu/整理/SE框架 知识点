
                                       —-—-—-— —-—-—-— 集合框架 —-—-—-— —-—-—-—
 * java.util.Collection接口
 * Collection是所有集合的顶级接口,规定了所有集合
 * 都应当具备的方法.

 * Collection下面有两个常见的子接口：
 * java.uiil.List：可重复集,且有序
 * java.util.Set：不可重复集,大部分实现类无序
 *  元素时复重复依靠元素自身equals比较的结果而定.

 * boolean add(E e)
 *  向当前集合中添加元素,成功添加则返回true

 * list.add(index, element);   当前集合中插入元素

 * int size()
 *  返回当前集合的元素个数  (int的取值范围)——与 数组 的 length 无关


 * boolean isEmpty
 * 判断当前集合是否为空集
 * 当集合中不含有任何元素时返回true

 * void clear()
 *  清空元素集合

*  boolean contains = c.contains(p);
 *  集合会将给定元素与集合元素顺序进行
*  equals比较,若有比较为true的则认为
 *  集合包含该元素.

* boolean remove(Object o)—-—-—-—删除给定元素
* 集合删除元素时，根据给定元素与集合元素顺序equals比较，删除为true的。
对List集合而言，若存在多个，则只删除一个。

boolean addAll(Collection c)—-—-—-—将给定集合元素添加到当前集合中

boolean removeAll(Collection c)—-—-—-—删除当前集合中与给定集合的共有元素

boolean hasNext()—-—-—-—判断集合是否还有元素可以遍历

E next()—-—-—-—取出集合中下一个元素

                                                —-—-—-— 泛型 —-—-—-—   7，8
 * JDK1.5之后推出的一个新特性：泛型
 * 泛型也称为参数化类型，它可以用于指定一个类中的
 * 属性类型，方法参数的类型以及返回值类型等。这样做
 * 的好处是将类型的定义权交给了调用者，而不再是提供
 * 者决定，提高了灵活性。
 * 泛型再集合中广泛被使用，用于指定集合中的元素类型。
 * 若不指定泛型，则默认为原型Object。

* 当调用方法传入泛型约束的参数时，编译器
* 会检查实际参数是否符合该参数执行的泛型
* 类型，不符合编译不通过。
* 由于当前集合泛型指定为String，那么调用
* add方法时编译器会检查实际参数是否为String
* 不符合就编译失败。

* 使用新循环遍历时,接收每个集合元素时
* 也可以直接使用泛型的实际类型了。

*泛型是编译器认可,而非虚拟机。
 *泛型不指定，原型就是Object。
 *泛型只是用来让编译器辅助做了一些事情
 *1：设置泛型类型值时，编译器辅助检查数据类型是否匹配
 *2：获取泛型类型值时，编译器会添加向下造型语句。
for(Integer i: c1) {
System.out.println(c1);
}
//不指定泛型则默认为原型Object
Collection c2 = c1;
c2.add("four");
//遍历时会出现类造型异常

                                    —-—-—-— java.util.List 线性表 —-—-—-—
 * List的特点：可重复集，并且有序。可以通过下标操作
 * 元素
 * 常用实现类：
 * ArraysList：内部有数组实现，查询块，增删慢
 * LinkedList：内部有链表实现,查询慢，增删块(首位
 *                 增删效率最优)
 * 对于性能不是极端苛刻情况下，通常使用ArrayList 

  E get(int index)—-—-—-—获取指定位置对应的元素

  E set(int index,E e)—-—-—-—将指定元素设置到指定位置
			返回值为原位置对应的元素。所以是替换元素操作。
  E remove(int index)—-—-—-—删除并返回给定位置对应的元素

  E add(int index,String e)—-—-—-—添加并返回给定位置对应的元素

  List subList(int s,int e)—-—-—-—截取指定范围内的子集

                                                     —-—-—-— 将子集元素扩大十倍 —-—-—-—
	for (int i = 0; i < subList.size(); i++) {
		Integer str = subList.get(i);
		Integer s = subList.set(i, str*10);
	}
	System.out.println(subList);
 * 对子集元素操作就是对原集合对应元素的操作

  list.subList(2, 9).clear()—-—-—-—删除list集合2-8

String[] str = c.toArray(new String[c.size()])—-—-—-—集合转换为数组
List<String> list = Arrays.asList(array)—-—-—-—数组转换为集合


                                               —-—-—-— 排序集合 —-—-—-—
 * 排序集合可以使用集合的工具类：
 * java.util.Collections
 * 
*  用法：Collections.sort(list);
*
 * 其定义了很多静态方法，用于操作集合。其中sort方法
 * 是对List集合进行自然排序(从小到大)

                                            —-—-—-— 排序自定义类型元素的集合 —-—-—-—
Point类实现接口 Comparable<Point>

* 实现Comparable接口后，要求必须重写该方法：
 * 该方法的意义是定义当前对象与参数对象的大小
 * 关系
 * 
 * sort方法要求集合元素必须实现Comparable
 * 接口    
*Collection的sort方法具有侵入性
 *所谓 侵入性，是指当我们使用某个功能时，该
*功能要求我们为其修改代码，修改的越多侵入
*性越强，一旦不需要该功能时，这些改动都没
*有意义了，这在实际开发中是很不推荐的。

 * 返回值不关注具体取值，只关注取值范围
 * 当返回值>0：当前对象this大于参数对象o
 * 当返回值<0：this<0
 * 当返回值=0：this=0
 */
public int compareTo(Point o) {
	//点到原点距离长的大
	int len = this.x*this.x+this.y*this.y;
	int olen = o.x*o.x+o.y*o.y;
	return len-olen;
}


                                                      —-—-—-— 队列 —-—-—-—
 队列可以保存一组元素，但是存取元素必须遵循： 先进先出

 * java.uilt.Queue接口
 * 规定了队列相关存取元素等操作
 * 
 * Queue继承自java.uilt.Collection
 * 所以集合的相关方法他也具备。比如size，clear等
 * 
 * 常用实现类：java.uilt.LinkedList

queue.offer();  适用于 队列
queue.poll();   出队操作
queue.peek();   引用队首元素，不做出队操作

迭代器遍历不会对元素修改

                                                ——--——--—— 双端队列 ——--——--——
 java.util.Deque接口，它继承自java.util.Queue
deque.offerFirst("three");   从队首方向入队
deque.offerLast("four");   从队尾方向入队
deque.peekFirst();   读取首位元素 有返回值
deque.peekLast();   读取尾位元素 有返回值
deque.pollFirst();   获取首位元素 有返回值
deque.pollLast();   获取尾位元素 有返回值

deque.push("one");  入栈操作
deque.pop();  出栈操作 有返回值

                                ——--——--—— MAP ——--——--——--
* java.util.Map接口
 * Map称为查找表，该数据结构体现的样子是一个"多行
 * 两列"的表格。左列称为key，右列称为value
 * Map总是根据key查找对应的value
 * 存储元素也要求以key-value成对存入。
 * 
 * 常用的实现类：java.util.HashMap 散列表
 * HashMap是基于散列算法实现的Map，当今世界上最快的
 * 查询结构

* V put(K k,V v)
	* 将给定的key-value 存入到Map中
	* Map有一个要求，key不允许重复(key的equals
	 * 比较决定)，若使用Map已有的key存入value，
	 * 则是替换value操作，那么put方法返回的就是
	 * 被替换的value，若没有替换则返回值null
	 * 
	 * 对于value是包装类的情况，切记，不要直接
	 * 用基本类型接受返回值，因为会触发自动拆箱
	 * 特性：
	 * int n = map.put("语文",99);
	 * 下面的代码编译后会改为：
	 * int n = mao.put("语文",99).intValue();
	 * 若key在Map中不存在，则返回值为null，若拆箱
	 * 会引发空指针异常。

 * V get(K k)
	 * 根据给定的key获取对应的value，若给定的
	 * key不存在则返回值为null。

* V remove(K k)
	 * 删除当前Map中给定的key所对应的这组键值对
	 * 返回值为该key所对应的value若给定的key在
	 * Map中不存在，则返回值为null。

遍历所有key
	 * Set keySet()
	 * 将当前Map中所有的key存入一个集合后返回
	 * 遍历这个集合等于遍历了所有的key

 * 遍历所有的value
	 * Collection values()
	 * 将当前map中所有的value以一个集合的形式
	 * 返回。

 * Set<Entry> entrySet（）
	 * 该方法会将Map中所有键值对存入一个集合
	 * 后返回。  



                                ——--——--—— Web ——--——--——--
 url:统一资源定位   DNS：域名解析服务器(www.baidu.com解析成IP地址+端口)

CR换行符 编号为13     LF回车符 编号为10



——————————————————————————————————————————
——————————————————————————————————————————


//# 反射

 ArrayList$Itr  $：表示内部类

1.Java 提供了一套API
2.提供了检查一个对象内部结构的手段
3.反射API可以
	1.动态加载类
	2.动态创建对象
	3.动态访问属性
	4.动态调用方法

>  反射API提供了"动态"执行功能!

## 反射检测对象的结构

	调用方法
	test("ABC")
	test('A')
	test(1)
	
	publkic void test(Object object){
		// obj 是什么类型？
		// 此类型中有那些属性？
		// 此类型有哪些方法？
	}

反射API可以动态检查对象的类型，类型的内部结构

检查对象类型的方法：

	class cls = obj.getClass();
	//返回值 cls 代表对象的类型.

	publkic void test(Object object){
		// obj 是什么类型？
		Class cls = onj.getClass();
		System.out.println(cls);
	}


## 动态加载类

API方法

	Class cls = class.forName(类名)；
	

## 动态创建对象

API方法
	//Instance 实例(对象)
	//创建clss代表类型的实例
	//class 类型上必须包含无参数构造器(可以是默认构造器)
	//newInstance就是调用这个无参数构造器创建对象!
	//如果没有无参数构造器则抛出异常!-
	Object obj = cls.newInstance()

> 可以利用Constructor调用有参数构造器创建对象，因为使用少，这里省略了。


## 动态访问属性

API方法
	//在 Field 类型上定义了get方法，可以用于获取对象的属性值
	//如果需要动态获取属性的值：
	1.利用 Class 类型对象的方法，才能获取 Field 类型对象
		-obj.getClass();
		-Class.forName();
	2.获取 Field 类型对象
	3.获得对象
		- new 一个对象
		- newInstance 创建对象	
	4.调用 get 方法
	
	Fidle f = fid.get(obj);
	//在对象obj上读取属性

## 反射的用途

解耦：

利用反射可以实现一段程序与未来一个类之间耦合在一起，这段程序就与未来的
类之间是松耦合的关系--也就是解耦了!

如： Eclipse 可以开发任何未来的程序，解析任何未来程序的结构

经典面试题目： 
	Eclipse 的快捷菜单用到了哪些技术?
	答：Eclipse利用反射技术实现快捷菜单，可以使Eclipse与被开发的类解耦


## 利用反射访问对象的方法

访问方法的核心API

	// invoke 调用
	// obj是包含当前method方法的对象
	// 
	method.invoke(obj,参数1，参数2，...)

使用步骤：
	1.-获得Class对象
		1)-Class.forName(类名)
	2.-利用Class对象的方法找到 Method 对象
		1)-getDeclaredMethod(方法名) 根据方法名找到 Method 对象
	3.-获得方法对象 method
	4.-获得包含方法的对象 obj
		1)-cls.newInstance()
	5.-准备参数(选项)
		1)Object val = method.invoke(obj);


## getDeclaredMethod 与 getMethod

cls.getDeclaredMethod 在当前cls类型上查找当前类中声明的方法
	-getDeclaredMethod 只查询当前类
cls.getMethod 在当前cls类型以及全部继承的方法中查找声明的公有方法
	- 查询当前类和父类中继承的方法


## 反射 -总结-

1.Java的动态执行 API
	-动态加载类
	-动态创建对象
	-动态访问属性
	-动态执行方法
2.可以用于实现软件组件的"解耦"
	-可以实现现在组件和未来的组件耦合关系，调用未来的程序i组件

例子：
	Eclipse 的快捷菜单使用反射技术
	WebServer与未来的Server组件的耦合也是使用反射技术

重点掌握方法：
1.Class.forName(类名)
2.Matchid.invoke(obj);
3.Class.newInstance()
4.setAccessible(true);

————————————————————————————————————————————
————————————————————————————————————————————
// ## XML

XML 指可扩展标记语言，是独立于软件和硬件的信息输出工具
XML 应用于web开发的许多方面，常用于简化数据的存储和共享
XML 简化数据共享
XML 简化书记传输
XML 简化平台的变更

XML 处理指令 简称PI
<?xml version="1.0" encoding="utf-8" ?>

实体引用:
	&lt		<		小于
	&gt		>		大于
	&amp		&		与字符(和字符)
	&apos		‘		单引号
	&quot		"		双引号

<![CDATA[	无论写啥都会被当做一个文本	]]>

SAX： 是一种XNL解析的替代方法。相当于DOM，SAX是一种
	数度更快，更有效的方法。它逐行扫描文档，一边
	扫描一边解析。而且相当于DOM，SAX可以在解析文
	档的任意时刻停止解析
优点：解析可以立即开始，速度快，没有内存压力
缺点：不能对节点做修改

DOM： 文档对象模型  是W3C组织推荐的处理XML的一种方式
	DOM解析器在解析XML文档时，会把文档中的所有元素
	按照其出现的层次关系，解析成一个个NODE对象(节点)
优点： 把xml文件在内存中构造树形结构，可以遍历和修改节点
缺点： 如果文件比较大，内存有压力，解析的时间会比较长

使用SAXReader需要导入dome4j-full.jar包
dom4j是一个java的XML API，类似于jdom，用来读写
XML文件
性能优异、功能强大和易用的特点，同时它也是一个开放源代码的软件

使用DOM4J解析XML的大致步骤：
1：创建SAXReader
	SAXReader reader = new SAXReader();

2：使用SAXReader读取xml文档并得到对应的Document    获取根元素，
   按照文档结构逐级获取元素，已达到遍历XML文档数据的目的
	Document doc = reader.read(new File("file"));
			   reader.read(new FileInputStream("file"));

3：Element的每一个实例用于表示xml文档中的一个元素(一对标签)

常用的方法：
	String getName()  获取当前元素的名字(标签的名字)
	String getText()  获取当前元素中间的文本(开始和结束标签中间的文本信息)
	String elementText(String name)
		 获取当前元素中指定名字的子元素中间的文本
		例如：
		String str = e.elementText("name");
		等同于
		String srt = e.element("name").getText();
	Element element(String name)  获取当前元素中指定名字的子元素
	List elements() 获取当前元素中所有子元素
	List elements(String name) 获取当前元素中所有的指定名字的同名子元素
	Attribute attribute(String name) 获取当前元素中指定名字的属性

XML写出操作：
1：创建一个Document对象表示一个空白文档
2：向Document中添加根元素
3：从根元素开始按照要生成的文档结构逐级
	添加子元素及信息
4：创建XmlWriter
5：将Document通过 XmlWriter写出以生成XML文档
//1
Document doc = DocumentHelper.createDocument();
//2：需要注意，该方法只能调用一次，因为一个文档只能有一个根元素。
//  Element addElement(String name)
Element root = doc.addElement("list");

--将每个员工信息以<Emp>标签形式存入到
---根元素中
 
--Element提供了追加相关信息的方法：

--Element addElement(String name)
----向当前元素中追加子元素并将其返回，以便继续
----对其追加

--Element addText(String text)
----相当前的开始与结束标签之间添加文本，返回
----的仍然是当前元素，以便对当前元素继续做其他
----追加操作。

--Element addAttribute(String name,String value)
----向当前元素中追加指定名字于对应值的属性，返回值
----仍然是当前元素。

//向根元素中追加子元素<emp>
Element empEle = root.addElement("emp");
//向<emp>中追加子元素<name>	
Element nameEle = empEle.addElement("name");
//向<name>标签中添加文本
nameEle.addText(e.getName());
//向<emp>中追加id属性
empEle.addAttribute("id", e.getId()+"");

//org.dom4j.io.XMLWriter
XMLWriter writer = new XMLWriter(
	new FileOutputStream("myemp.xml"),
	OutputFormat.createPrettyPrint()//创建漂亮的格式
);
writer.write(doc);
writer.close(

——————————————————————————————————————————
————————————————————————————————————————————
//时间

java.util.Calendar
//日历类默认也表示当系统时间
 * 日历类
 * Calemdar本身是一个抽象类，定义了日历类操作时间
 * 的相关方法，其提供了一个静态方法getInstance()
 * 可以根据系统所在地区获取一个适用的实现类。大部分
 * 地区获取的都是GregorianCalendar,即：阳历

calendar可以与Date之间相互转换
* 
* 1：Calendar->Date
* Calendar提供了方法：
* Date getTime()
* 该方法可以将当前Calendar所表示的日期
* 以Date形式返回

 Date->Calendar
* Calendar提供了方法：
* void setTime(Date date)
* 使当前Calendar表示给定的Date所表示的
* 日期

/获取年    "Calendar.YEAR""
/获取月    "Calendar.MONTH)+1 "   月从0开始
/获取日    "Calendar.DAY_OF_MONTH"
/获取小时  "Calendar.HOUR_OF_DAY"
/获取分钟  "Calendar.MINUTE "
/获取秒    "Calendar.SECOND"
/年中天    "Calendar.DAY_OF_YEAR"
/月中天    "Calendar.DAY_OF_MONTH"


 计算时间操作
 void add(int field,int amount)
  对指定的时间分量加上指定的值，若给定的值是负数
  则是减去
//加3年
calendar.add(Calendar.YEAR, 3);


 Calendar提供了方法：
 * int get(int field)
 * 根据给定的时间分量(各种时间单位)获取对应的值
 * 
 * 时间分量是一个int值，无需记忆数字，Calendar提供
 * 了对应的常量。
//获取年
int year =  calendar.get(Calendar.YEAR);
//查看今年共多少天
d = calendar.getActualMaximum(Calendar.DAY_OF_YEAR);


设置指定时间分量所对应的值
 * void set(int field,int value)


java.text.SimpleDateFormat
 * 可以将字符串与Date之间按照指定的日期格式
 * 进行相互转换
SimpleDateFormat sdf = new SimpleDateFormat("YYY-MM-dd aH:mm:ss  E");
String str = sdf.format(now);//转换为 2018-04-27 下午14:20:00  星期五
Date date = sdf.parse(str);






————————————————————————————————————————————
————————————————————————————————————————————
//     常忘

CR换行符 编号为13     LF回车符 编号为10

ArraysList：内部有数组实现，查询块，增删慢
LinkedList：内部有链表实现,查询慢，增删块(首位
               增删效率最优)

一个请求会包含三部分：
1：请求行
2：消息头
3：消息正文请求行

请求行是一行字符串，格式为：
method url protocol(CRLF)
例如
GET /index.html HTTP/1.1(CRLF)

method：请求的方式，常见的GET，POST

GET：地址栏请求，通常用户传递数据会直接体现在url部分
POST：用户传递的数据包含在消息正文部分，传附件时一定
       会使用POST形式
	   
url：客户端希望请求的资源的路径

prorocol：客户端发起请求使用的HTTP协议版本

消息头：
消息头由若干行组成，每行都以CRLF结尾。
每一行为一个具体的消息头内容，格式为：
name：value(CRLF)

一个响应也分为三部分：
状态行，响应头，响应正文

状态行：
状态行由一行字符串描述。格式：
protorol statusCode statusReason(CRLF)
协议版本   状态码        状态描述



————————————————————————————————————————WEB————————————————————————————————————————
<html>
head中的内容不是用于给用户展示的内容
	通常页面中使用到的样式，脚本等信息存放在这里
<title>我的首页</title>  标签
<meta charset = "UTF-8">  //指定字符集

body中的内容会体现在浏览器中用于给用户展示
  <body>  
     <center>居中  html中不推荐使用
     <input type="text" size="32"> 输入框 能输入32个字符
     <input type="button"value="百度一下你就知道">  按钮 + 字
      <h1-6></h1-6>  字体大小
  </body>
</html>




——————————————————————————————————————————————




















































