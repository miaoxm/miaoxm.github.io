1.什么是类？什么是对象？
什么是类
	①现实世界是由很多对象组成的，基于对象抽出了类
	②类中可以包含:
		所有对象所共有的属性/特征----------------成员变量
		所有对象所共有的行为---------------------方法
	③一个类可以创建多个对象
			同一类型所创建出来的对象，结构相同，数据不同
	④类是对象的模板，对象是类具体的实例
什么是对象
	对象:真实存在的单个个体 ，代表一类个体


2.如何创建类？如何创建对象？如何访问成员？
	创建类Class   Student{
	int a = 5;
	}
	创建对象
	类(数据类型)   引用类型变量   指向        对象
	Student                zs                =      new Student();
	访问成员
	zs.a通过引用类型变量点
	
3.高质量代码的特点？
  复用性好、扩展性好、维护性好、
  可移植性好、健壮性好、可读性好、效率好...
  
4.方法的签名？
方法名+参数列表

5.构造方法的作用及特点？
 1.常常给成员变量赋初值
 2.与类同名，没有返回值类型
 3. 在创建（new）时被自动调用
 4.若不写构造方法，则编译器默认一个无参构造方法，若自己写了构造方法，则编译器不在默认提供
 5.构造方法可以重载
 
6.this关键字的作用及用法？
作用     this指代当前对象，哪个对象调用方法指的就是哪个对象，只能用在方法中，方法中访问成员变量之前默认有个this
用法     this.成员变量名----------访问成员变量
			this.方法名（）----------调用方法（一般不用）
			this（）-----------------调用构造方法
			
7.发生NullPointerException空指针异常,为什么？
	若引用的值为null，则该引用不能再进行任何操作
	若继续操作则会发生NullPointerException

8.举例说明引用类型数组的声明及初始化。
	Student[] stus = new Student[3];
    stus[0] = new Student("zhangsan",25,"LF");
	stus[1] = new Student("lisi",26,"JMS");
	stus[2] = new Student("wangwu",27,"SD");
	
	Student[] stus = new Student[]{
      new Student("zhangsan",25,"LF"),
      new Student("lisi",26,"JMS"),
      new Student("wangwu",27,"SD")
    };
	
9.举例说明二维数组的声明及初始化。
	int[][] arr = new int[3][];
    arr[0] = new int[2];
	arr[1] = new int[3];
	arr[2] = new int[2];
	arr[1][0] = 100;
	
10.实现继承的关键字？继承的作用？
 extends
 作用 代码复用
 
 
11.super关键字的作用及用法？
指代当前对象的超类对象
super的用法:
    super.成员变量名-----------------访问超类的成员变量
	super.方法名()-------------------调用超类的方法
	super()--------------------------调用超类的构造方法


12.向上造型特点？
1.超类型的引用指向派生类对象
2.能点出来什么，看引用的类型

13.重载和重写的区别？
重写
发生在父子类中，方法名称相同，参数列表相同，方法体不同
遵循"运行期绑定"，看对象的类型来调用方法
重载:
发生在一个类中，方法名称相同，参数列表不同，方法体不同
遵循"编译期绑定"，看引用/参数的类型来绑定方法
14.package的作用？
1.避免类名冲突
2.包名可以有层次结构
3.建议：包名所有字母都

15.类的全称是？
类的全称为：包名.类名

16.为什么会用到import关键字？
同包中的类可以直接访问，不同包中的类不能直接访问
需要用import声明类在使用

17.分别说明访问控制修饰符权限。
public：公开的，任何类都能访问
private 	私有的，只能本类访问
protected 受保护的，可以，本类，子类，同包类访问
默认的  什么也不写，可以本类，同包类访问
类的访问修饰只能是public和默认的
类中成员的访问修饰如上四种都可以

18.分别说明静态变量、静态方法、静态块的特点
 静态变量
	由 static修饰
	属于类，存储在方法区中，只有一份
	常常通过类名点来访问
	何时用:所有对象所共享的数据
 静态方法
	由static修饰
	属于类，存储在方法区中，只有一份
	常常通过类名点来访问
	静态方法中没有隐式的this传递，
	静态方法中不能直接访问实例成员
	何时用:方法的操作仅与参数相关而与对象无关
静态块
	属于类，在类被加载期间自动执行
	因为类只加载一次所以静态块也只执行一次
	何时用:加载/初始化静态资源
	
19.分别说明被final修饰的变量、方法、类的特点
final
 1.修饰变量:变量不能被改变
 2.修饰方法:方法不能被重写
 3.修饰类:类不能被继承
 
20.如何定义常量？说明其特点？
定义
	1.必须声明同时初始化
	2.通过类名点来访问，不能被改变
	3.常量名所有字母都大写，多个单词通过_来分隔
特点
	1.编译器在编译时将常量直接替换为具体的值，效率高
	2.何时用：数据永远不变，并且经常使用

21.成员变量包含实例变量和静态变量，分别说明其特点？
实例变量
	1.没有static 属于对象，储存在堆中，有几个对象就有几个实例变量，通过对象名点来访问
	他是每一个属性私有的，某个对象将其改变不影响其他对象的取值结果
静态变量
	只有一份
	通过类名点来访问，对象共有的，一个对象将其改变后另一个对象在调用时得到的是他改变后的值

22.抽象方法的特点？
	由abstract修饰 只有方法的定义，没有具体的实现没有大括号{}
 
23.抽象类的特点？
	由abstract修饰
	包含抽象方法的类必须是抽象类
	不包含抽象方法的类也可以声明为抽象类 （没啥用）
	抽象类不能被实例化
	抽象类都是需要被继承的，派生类：
		继承后需要重写抽象类的所有抽象方法
		
24.抽象类的意义？
	1.封装派生类所共有的属性和行为-----代码复用
	2.为所有派生类提供统一的类型----向上造型
	3.可以包含抽象方法，为派生类提供统一的入口
	派生类的具体实现不同，但是入口是一致的
	
25.成员内部类特点？（简单了解）
	类中套类
	内部类通常只服务于外部类，对外不具备可见性
	内部类通常只在外部类中创建
	内部类可以直接访问外部类的成员（包括私有的）
	内部类中有一个隐式的引用指向了创建他的外部类对象

26.为什么会用到匿名内部类（什么是匿名内部类）？匿名内部类访问外部变量的特点？
	若想创建一个类的对象，并且对象只被创建使用一次，此时该类不必命名，称之为匿名内部类
	匿名内部类想访问外面的变量，要求该变量必须是final的（jdk1.7之前）

27.定时器?
timer.schedule(new TimerTask(){
  public void run(){ 
  }
},10,10);
定时器------定时的干一件事

28.接口的特点？
	是一种数据类型（引用类型）
	由interface定义的
	只能包含常量和抽象方法
	接口不能被实例化
	接口是需要被实现/继承的
	必须重写接口中所有抽象方法
	一个类可以实现多个接口，用逗号分隔
	若又继承又实现则先继承后实现
	接口可以继承接口继承时用extends

29.接口和抽象类的区别？
	接口只能包含抽象方法，抽象类可以包含普通方法
	接口只能定义静态常量属性，抽象类即可以定义普通属性，也可以定义静态常量属性
	接口不包含构造方法，抽象类可以包含构造方法

30.多态的意义？
意义
	同一类型的引用只想不同的对象时，有不同的实现--称为行为多态
	同一个对象被造型为不同的类型时，有不同的功能 ---对象多态
31.强制类型转换成功的条件有哪两种？
	引用所指向的对象就是该类型
	引用所指向的对象实现了该接口/继承了该类

32.如何避免强转时，发生的类型转换异常？
	强转之前先通过instanceof来判断引用所指向的对象是否是该类型

33.java中的内存是由谁管理的？内存分为哪几部分？
	由JVM管理
	分为堆、栈、方法区

34.堆中存储什么？垃圾的定义？java如何来处理垃圾？

35.什么是内存泄漏？如何避免？

36.成员变量的特点？

37.局部变量的特点？

38.实例变量的生命周期？

39.栈中存储什么？局部变量的声明周期？

40.方法区存储什么？

41.面向对象的三大特征，分别说明相关概念及作用？

42.如何调试代码？

43.如何用调试？调试的作用是什么？










正课:
1.内存管理:由JVM来管理
  1)堆:
    1.1)存储new出来的对象(包括实例变量)
	1.2)垃圾:没有任何引用所指向的对象，
	    垃圾回收器(GC)不定时到内存中清扫垃圾，
        回收过程是透明的(看不到的)，不一定一发现垃圾就立刻回收，
		调用System.gc()可以建议虚拟机尽快调度GC来回收垃圾
	1.3)实例变量的生命周期:
	      创建对象时存在堆中，对象被回收时一并被回收
	1.4)内存泄漏:不再使用的对象还没有被及时的回收
	    建议:不再使用的对象及时将引用设置为null
  2)栈:
    2.1)正在调用的方法中的局部变量(包括方法的参数)
	2.2)调用方法时，在栈中为该方法分配一块对应的栈帧，
	    栈帧中存储方法中的局部变量(包括方法的参数)，
		方法调用结束时，栈帧被清除，局部变量一并被清除
	2.3)局部变量的生命周期:
	      方法调用时存储在栈中，方法结束时与栈帧一并被清除
  3)方法区:
    3.1)存储.class字节码文件(包括方法、静态变量)
	3.2)方法只有一份，通过this来区分具体的访问对象

设计规则:
1)将所有派生类所共有的属性和行为，抽到超类中-------抽共性
2)所有派生类的行为都一样，设计为普通方法
  所有派生类的行为都不一样，设计为抽象方法
3)将部分派生类所共有的行为，抽到接口中
  符合既是也是原则时，使用接口
  接口是对继承的单根性的扩展------------多继承


面向对象三大特征:
1.封装:
  1)类:封装的是对象的属性的行为
  2)方法:封装一段特定的业务逻辑功能
  3)访问控制修饰符:封装的是具体的访问权限
2.继承:
  1)作用:代码复用
  2)超类:所有派生类所共有的属性和行为
    接口:部分派生类所共有的行为
	派生类:派生类所特有的属性和行为
  3)单一继承、多接口实现，传递性
3.多态:
  1)行为多态(所有抽象方法都是多态的)
    对象多态(所有对象都是多态的)
  2)向上造型、强制类型转换、instanceof
  3)多态的表现形式:
    3.1)重写:根据对象的不同来多态
	3.2)重载:根据参数的不同来多态


