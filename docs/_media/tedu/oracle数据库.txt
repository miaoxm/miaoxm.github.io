# DDL create drop alter
# 常用数据类型
## number(p,s)
p表示数字的总位数
s表示小数点后面的位数
## char(N) 固定长度的字符类型
N表示占用的字节数，最大长度为2000字节
## varchar2(N) 可变长度的字符类型
N表示占用的字节数，最大长度为4000字节
## date 日期时间的数据 长度为7个字节
默认格式 DD-MON-RR 例如：11-01月-17
# 创建表
create table student(id number(4),name varchar2(20),gender char(1),height number(3,2),birth date);
## 设置默认属性
create table student(id number(4),name varchar2(20),gender char(1) default 'm',height number(3,2),birth date);
## 设置不为空
create table student(id number(4),name varchar2(20) not null,gender char(1) default 'm',height number(3,2),birth date);
# 修改表
## 修改表名
rename student to students;
## 添加address列
alter table students add address varchar2(2);
## 修改address列
alter table students modify address varchar2(200);
## 修改列名
alter table students rename column address to stu_address;
## 删除stu_address列
alter table students drop column stu_address;
# DML insert,update,delete
## 插入数据 insert
insert into student values(1,'Rose','F',1.56,'01-12月-1997');
insert into student (id,name) values(2,'Admin');
## 修改数据 update
update student set height = 1.78,birth = '12-12月-1998' where id = 2;
## 删除数据 delete
delete from student where id = 2;
# TCL 事务控制语言 commit,rollback,savepoint
# truncate清空表
truncate table student;
delete可以有条件的删除，truncate将表数据全部删除
delete是DML语句，可以回退，truncate是DDL语句，立即生效，无法回退
delete删除表数据，保留主键自增，truncate清空
如果是删除全部表数据，且数据量较大，delete语句效率比truncate语句低
删除全部记录：delete from emp;或者 truncate table emp;
# select 查询语句
算术运算符、给列起别名、distinct去除重复行
别名：如果别名区分大小写和包含空格，需要放到双引号的里面
# 字符串类型
## char
## varchar2
## long和clob
long是varchar2的加长版最多达2GB，每个表只能有一个龙类型列，不能作为主键，不能建立索引，不能出现在查询条件中
clob：存储定长或变长字符串，最多达4GB字符串数据
在ORACLE建议开发中使用clob替代long类型
# 字符串函数
1. concat 返回字符串连接的值（字符串的拼接）
select concat('hello','students') from dual;
2. || 连接符
select 'hello'||'students' from dual;
3. length 返回字符串的长度
select length('hello') from dual;
ex:select length(ename) from emp;
4. upper,lower,initcap(每个单词的第一个字母大写)
select upper(ename),lower(ename),initcap('i am student') from emp;
5. trim(截取前后指定字符),ltrim(截取左面指定字符),rtrim(截取右面指定字符)
select trim('e' from 'ehelle') from dual;//hell
select ltrim('ehelle','e') from dual;//helle
select rtrim('ehelle','e') from dual;//ehell
6. lpad(左补位),rpad(右补位)  补位函数
select lpad(sal,10,'$') from emp;
select rpad(sal,10,'$') from emp;
7. 截取函数 substr(char1,n,m)从第n个数开始截取，一共截取m个
select substr('hello',2,3) from dual;//ell
8. instr(char,指定字符)  查看指定的字符在字符串中第一次出现的位置
select instr('hello','l') from dual;//3
# 数值类型和数值函数
## 数值类型
1. number(p)表示整形
2. number(p,s)表示浮点型
## 数值函数
1. round(n[,m])用于四舍五入
select round(45.678,2) from dual;//45.68
select round(45.678,0) from dual;//46
select round(45.678,-1) from dual;//50
2. trunc(,[,m])用于截取
select trunc(45.678,2) from dual;//45.67
select trunc(45.678,0) from dual;//45
select trunc(45.678,-1) from dual;//40
3. mod(m,n)返回m除以n后的余数
select ename,sal,mod(sal,1000) from emp;
4. ceil(天花板，向上取整)和floor(地板，向下取整)
select ceil(45.678) from dual;//46
select floor(45.678) from dual;//45
# 日期类型和日期函数
## 日期类型
1. date 时间范围：公元前4712年1月1日至公元9999年112月31日，固定存储7个字节
第一字节：世纪+100；第二字节：年；第三字节：月；第四字节：天；第五字节：小时+1；第六字节：分+1；第七字节：秒+1
2. timestamp 数据库内部用7个或者11个字节存储，精度为0
1-7个字节：与date相同
8-11个字节：纳秒，采用4个字节存储，内部运算类型为整型
## 日期关键字
1. sysdate 返回当前的系统时间，精确到秒，默认显示格式DD-MON-RR
select sysdate from dual;
select to_char(sysdate,'yyyy-mm-dd hh24:mi:ss') from dual;
create table student(id number(4),name char(20),registerDate date default sysdate);
2. systimestamp 返回当前系统日期和时间，精确到毫秒
select systimestamp from dual;
## 日期函数
YY：2位数字的年份；YYYY：4位数字的年份；MM：2位数字的年份；MON：简拼的月份；MONTH：全拼的月份；
DD：2位数字的天；DY：周儿的缩写；DAY：周儿的全拼；HH24：24小时制的小时；HH12：12小时制的小时；MI：显示分钟；SS：显示秒
1. to_char把日期类型转换成字符串类型
to_char(日期,格式字符串)
select to_char(sysdate,'yyyy"年"mm"月"dd"日"') from dual;//2017年12月1日
2. to_date把字符串类型转换成日期类型
to_date(字符串，格式字符串)
select to_date('2000-01-01','yyyy-mm-dd') from dual;
3. last_day 返回当前本月的最后一天
select lasy_day(sysdate) from dual;//31-12月-17
4. add_months 表示几个月之后的日期
select add_months(sysdate,1) from dual;//07-1月-18
5. months_between 两个日期之间相差的月份
select months_between(sysdate,hiredate) from emp;//当前日期与入职的相差的时间
6. next_day 返回当前日期的星期几的日期
select next_day(sysdate,2) from dual;//下个周一的日期
# NULL的含义
NULL,即空值，有时候的某些字段值，数据未知或暂时不存在，取值NULL，任何数据类型均可取值NULL。
null值做算术运算，运算完的结果仍然为空
显示员工姓名和应发工资（基本工资+奖金）
select ename,sal+comm from emp;
## 通用函数
select nvl(1,2) from dual;//第一个参数不为null，则返回第一个参数，为null，则返回第二个参数
select nvl2(1,2,3) from dual;//如果第一个参数不为空，则返回第二个参数的值，如果第一个参数为空，则返回第三个参数的值。
nvl解决null的问题
select ename,sal+nvl(comm,0) from emp;
nvl2解决null的问题
select ename,sal+nvl2(comm,comm,0) from emp;
# DQL 
导入数据文件dmp
imp system/yourpassword fromuser=导出用户 touser=导入用户 file=c:/scott.dmp
## 比较运算符 > < >= <= = != <>
## 逻辑运算符 and or not(不能单独使用)
## 其他运算符 between...and,in,like,is null
like _占位符，%表示0个或多个字符
要用is null，不能用= null
not between...and;not in;not like;is not null;
select * from emp where comm is not null;
## any,all,不能单独使用，和比较运算符一起使用> >= < <=
>any,<any,>all,<all
- 查询工资大于（2500，3000，5000）员工的信息
select * from emp where sal >any(250,3000,5000);
## 排序 order by
可以多字段进行排序
order by deptno asc,sal desc
## 聚合函数
min(),max(),sum(),avg(),count()
select min(sal),max(sal),sun(sal),avg(sal),count(*) from emp;
所有聚合函数都是忽略null的计算
## group by 分组查询，后面跟字段1，字段2
- 显示每个部门的平均工资（部门编号，平均工资）
select deptno,avg(sal) from emp group by deptno;
- 查询每个部门的工资总额（部门编号，工资总额）
select deptno,sum(sal) from emp group by deptno;
- 显示每种职务的人数（职务，人数）
select job,count(*) from emp group by job;
- 显示每个部门，每种职务的人数（部门编号，职务，人数）
select deptno,job,count(*) from emp group by deptno,job order by deptno;
- 查询1月到12月入职 的人数（月份，人数）
select to_char(hiredate,'mm'),count(*) from emp group by to_char(hiredate,'mm') order by to_char(hiredate,'mm');
- 总结：没有被分组函数包含的列，必须出现在group by的后边
- having 通常和group by 子句一起使用
- 显示每个部门的平均工资，只查看平均工资大于2000的部门（部门编号，平均工资）
select deptno,avg(sal) from emp group by deptno having avg(sal) > 2000;
## 关联查询(连接查询)
- 做关联查询，没有指定关联条件，就会出现笛卡尔积
- 笛卡尔积，查询emp，dept表的集合(一定要避免出现笛卡尔积)，没有给链接表一个有效的关联条件
这是笛卡尔积的错误例子：select emp.*,dname,loc from emp,dept;
### 内连接查询(inner join...on...)：把满足条件的数据查出来
- 查询员工的基本信息，部门名称
select emp.*,dname from emp inner join dept on emp.deptno=dept.deptno;
- 表别名
select e.*,dname from emp e inner join dept d on e.deptno=d.deptno;
- 省略inner join
select e.*,dname from emp e,dept d where e.deptno=d.deptno;
### 等值连接查询(用=进行关联条件)，非等值连接查询(用除了=之外的进行关联条件)
- 查询员工的姓名，工资，工资等级
select e.ename,e.sal,g.grade from emp e,salgrade g where e.sal between losal and hisal;
- 查询员工的基本信息，部门名称，工资等级
select emp.*,dname,grade from emp,dept,salgrade where emp.deptno=dept.deptno and sal between losal and hisal;
- 多表连接查询，有效的连接条件是n-1个
### 外连接查询，除了把满足条件的数据查询出来，还要把不满足条件的数据查询出来
- 左外连接查询，右外连接查询，满足连接查询
- 左外连接查询：除了把满足条件的数据查出来，还要把左表中不满足条件的数据查出来
- left join...on
- 查询所有员工信息，部门编号
select emp.*,dname from emp left join dept on emp.deptno=dept.deptno;
- 右外连接查询：除了把满足条件的数据查出来，还要把右表中不满足条件的数据查出
- right join...on
- 查询所有部门的员工
select emp.*,dname from emp right join dept on emp.deptno=dept.deptno;
### 满外连接 除了把满足条件的数据查出来，还要把左右表中不满足条件的数据查出
- full join...on
select emp.*,dname from emp full join dept on emp.deptno=dept.deptno;
### 自连接 是一种特殊的连接查询，数据来源是一个表，即关联关系来自于表中的多个列
- 查询员工的姓名和他部门经历的姓名
select e.ename,m.ename from emp e,emp m where e.mgr=m.empno;
### 子查询 可以出现在where子句，having子句，from子句，select子句中，子查询要写到（子查询）中
1. where子句
- 查询比scott员工工资高的员工信息
select * from emp where sal>(select sal from emp where ename='SCOTT');
- 查询和7566是同一部门的员工信息
select * from emp where deptno=(select deptno from emp where empno=7566);
- 查询工资最低的员工信息
select * from emp where sal=(select min(sal) from emp);
- 查询比7369号员工晚入职一年的员工信息
select * from emp where hiredate>(select add_months(hiredate,12*1) from emp where empno=7369);
- 总结：按查询结果：单行查询和多行子查询
	单行子查询：子查询返回一行，使用单行运算符（比较运算符）
	多行子查询：子查询返回多行，使用多行运算符（in,any,all）
- 查询管理者的员工信息
select * from emp where empno in(select distinct mgr from emp);
select distinct mgr from emp因为返回的结果是多个，所以不能使用>,<,=等比较运算符
- 查询大于30部门的所有员工工资的员工信息
select * from emp where sal>all(select distinct sal from emp where deptno=30);
等价于：select * from emp where sal>(select max(sal) from emp where deptno=30);
- 按照子查询和主查询执行的顺序分类：
	标准子查询：先执行子查询，用于主查询
	相关子查询：先执行主查询，后执行子查询
- 查询工资超过本部门平均工资的员工信息
select * from emp e where sal>(select avg(sal) from emp where deptno=e.deptno);
2. having子句
- 查询最低工资大于30部门的最低工资的部门信息（部门编号，最低工资）
select deptno,min(sal) from emp group by deptno having min(sal)>(select min(sal) from emp where deptno=30)
3. from子句
- 查询工资超过本部门平均工资的员工信息
select e.* from emp e,(select deptno,avg(sal) avg_sal from emp group by deptno) x where e.deptno=x.deptno and e.sal>avg_sal;
4. select 子句
- 查询员工姓名，工资，部门名称
select e.name,e.sal,(select d.name from dept d where d.deptno=e.deptno) dname from emp e;
## 分页查询
1. ROWNUM被称作伪列，用于返回标识行数据顺序的数字
select rownum,empno,empno,ename,sal from emp;
- rownum：查询一行添加一个行号，从1开始依次顺序添加
select emp.* from emp where rownum = 1;
select emp.* from emp where rownum <= 3;
只能从1计数，不能从结果集中直接截取
select rownum,empno,empno,ename,sal from emp where rownum>3;查询不到结果
- rownum作为结果集中可以使用的数据，通过行内视图实现
select * from (select emp.*,rownum rn from emp);
select * from (select emp.*,rownum rn from emp) where rn >= 3;
2. 分页功能
select * from (select emp.*,rownum rn from emp) where rn between 11 and 20;
- 按工资降序排序，取出工资降序排序后的第8到10条数据
select * from (select emp.*,rownum rn from emp (select emp.* from emp order by sal desc) e) where rn between 8 and 10;
# DECODE函数和CASE语句
## DECODE函数的基本语法
- DECODE(expr,search1,result1[,search2,result2...][,default])
如果表达式expr匹配search1，则执行result1；匹配search2，则执行result2；都不匹配，则执行default，没有default值的话，则为null
- 查询员工表，按照员工的职位计算工资的金额
- manager 1.2;analyst 1.1;salesman 1.05;sal 1
select ename,job,sal,decode(job,'MANAGER',sal*1.2,'ANALYST',sal*1.1,'SALESMAN',sal*1.05,sal) bonus from emp;
## CASE语句完成
select ename,job,sal,case job when 'MANAGER' then sal*1.2 when 'ANALYST' then sal*1.1 when 'SALESMAN' then sal*1.05 else sal end bonus from emp;
- 计算人数，analyst/manager属于vip，其他都属于operation，给vip和operation计数
select decode(job,'MANGER','vip','ANALYST','vip','operation') job,count(*) from emp group by decode(job,'MANGER','vip','ANALYST','vip','operation');
# 排序函数
## ROW_NUMBER
ROW_NUMBER() OVER(PARTITION BY col1 ORDER BY col2);//表示根据col1分组，在分组内部根据col2排序
此函数计算的值就表示每组内部排序后的顺序编号，组内连续且唯一
Rownum是伪列，ROW——NUMBER功能更强，可以直接从结果集中取出子集
- 按照部门分组，组内按照sal排序
select ename,deptno,sal,row_number() over(partition by deptno order by sal) as emp_no from emp;
## RANK
- 按照部门分组，组内按照sal排序
select ename,deptno,sal,rank() over(partition by deptno order by sal) as emp_no from emp;
## dense_rank
- 按照部门分组，组内按照sal排序
select ename,deptno,sal,dense_rank() over(partition by deptno order by sal) as emp_no from emp;
- 总结三者的区别：在出现相同数据的前提下(例如工资相同)，通过ROW_NUMBER的emp_no不会出现重复的序号(例如：1，2，3，4，5)，通过RANK的emp_no(1,2,2,4,5),通过dense_rank的emp_no(1,2,2,3,4,5);
# 集合的操作union,union all,intersect,minus          并，交，差
多条作集合操作的select语句的列的个数和数据类型必须匹配
order by子句只能放在最后的一个查询语句中
集合操作的语法：select statement1 [union|union all|intersect|minus] select statement2;
- 查询职务是manager的员工信息
- 工资大于2500的员工信息
- 使用union，会去除两条查询语句相同的数据  并集的操作
select ename,job,sal from emp where job='MANAGER';
union
select ename,job,sal from emp where sal>2500;
- 使用union all，两条查询语句的数据量的和
select ename,job,sal from emp where job='MANAGER';
union all
select ename,job,sal from emp where sal>2500;
- 使用intersect,显示两条查询语句的交集数据  交集的操作
select ename,job,sal from emp where job='MANAGER';
intersect
select ename,job,sal from emp where sal>2500;
- 使用minus，显示两条查询语句的相差的数据  差集的操作
select ename,job,sal from emp where job='MANAGER';
minus
select ename,job,sal from emp where sal>2500;
# 视图 view 对视图的操作和对表的的操作是一样的
简化复杂查询，限制数据访问
分为：简单视图，复杂视图（连接视图）
- 修改或创建视图（简单视图）
create or replace view view_name as select ename,hiredate from emp;
- 修改或创建视图（复杂视图）
create or replace view view_name as select deptno,count(*) count,min(sal) sal from emp group by deptno;
- create or replace view view_name as select ename,dname from emp,dept where emp.deptno=dept.deptno;（复杂视图）
- 不建议对视图进行增删改的操作（只有简单视图支持增删改的操作），只是为了简化查询的操作
- create or replace view view_name as select ename,hiredate from emp 为ith read only;
-删除视图
drop view view_name;
# 序列
1. 什么是序列？
是用来生成唯一数字值的数据库对象
2. 作用

3. 序列的定义
create sequence dept_seq start with 100 increment by 10;
从100开始，每次增加1
4. 使用序列
- nextval 取序列的下一个值
select dept_seq.nextval from dual;
insert into emp values(dept_seq.nextval,null,null,null,null,null,null,null);
- currval 取序列的当前值
select dept_seq.currval from dual;
5. 删除序列
drop sequence dept_seq;
# 索引
索引是为了提高数据库的查询效率，建立的数据库库对象
索引一旦被创建就被oracle系统自动维护
索引的使用：查询语句中不用指定使用哪个索引
1. 聚集索引：索引的顺序和表记录的顺序一致
2. 非聚集索引：索引的顺序和表记录的顺序不一致
3. 创建索引
create index emp_ename on emp(ename);
select * from emp where ename='KING';
4. 删除索引
drop index emp_ename;
# 约束
1. 非空约束(Not NUll),简称NN
2. 唯一性约束(Unique),简称UK
3. 主键约束(Primary Key),简称PK
4. 外键约束(Foreign Key),简称FK
5. 检查约束(Check),简称CK
## 添加约束
create table test(tid number(4) primary key,name varchar2(30) not null,email varchar2(40),gender char(1),constraint email_un unique(email),constraint gender_ck check(dender='F' or gender='M');
- 添加外键约束
constraint emp1_dept_fk foreign key(deptno) references dept1(deptno)
## 对已经创建好的表的字段添加约束
create table t2(id number(4),name varchar2(30));
alter table te add constraint t2_pk primary key(id);
# PL/SQL 块结构代码
1. 只定义执行部分
begin dbms_output.put_line('hello !');
end;
2. 包含声明和执行部分
declare v_ename varchar2(30);
begin select ename into v_ename from emp where empno=7839;dnms_output.put_line(v_ename);
end;
3. 包含声明、执行和异常部分的例子
declare v_ename varchar2(30);
begin select ename into v_ename from emp where empno=123;
dnms_output.put_line(v_ename);
exception when no_data_found then dbms_output.put_line('查无此人！')
end;
## 标识符
1. 定义变量，存储员工的姓名和工资
declare
	v_ename varchar2(30);
	v_sal number(5);
	v_x number(3) :=2;
begin
	select ename,sal into v_ename,v_sal from emp where empno=7839;
	dbms_output.put_line(v_ename||','||v_sal);
end;
2. 参照表的列类型
declare
	v_ename emp.ename%type;
	v_sal emp.sal%type;
	v_x number(3) :=2;
begin
	select ename,sal into v_ename,v_sal from emp where empno=7839;
	dbms_output.put_line(v_ename||','||v_sal);
end;
3. 记录类型
type 类型名 is record(
	变量名1，
	变量名2，
	。。。。
);
declare
	type emp_record is record(
	v_ename emp.ename%type,
	v_sal emp.sal%type
	);
	e emp_record;
	v_x number(3) :=2;
begin
	select ename,sal into v_ename,v_sal from emp where empno=7839;
	dbms_output.put_line(e.v_ename||','||e.v_sal);
end;
4. 参照记录类型
declare
	e emp%rowtype;
	begin
	select * into e from emp where empno=7839;
	dbms_output.put_line(e.ename||','||e.sal||','||e.hiredate);
	end;
## 控制语句
1. if语句
declare
	v_age number(3) :=18;
begin
	if(v_age>=18) then
	dbms_output.put_line('可以考取驾照');
	end if;
end;
2. if...else语句
declare
	v_age number(3) :=12;
begin
	if(v_age>=18) then
	dbms_output.put_line('可以考取驾照');
	else
	dbms_output.put_line('不可以考取驾照');
	end if;
end;
3. if... elseif...else(满足条件，结束执行)
declare
	v_age number(3) :=12;
begin
	if(v_age>=18) then
	dbms_output.put_line('>=18');
	elseif(v_age>=16) then
	dbms_output.put_line('>=16');
	elseif(v_age>=12) then
	dbms_output.put_line('>=12');
	else
	dbms_output.put_line('default');
	end if;
end;
## 循环
- 打印1-10
1. loop...end loop
declare
	v_x number(4) :=1;
	begin
	loop
	dbms_output.put_line(v_x);
	v_x := v_x+1;
	exit where v_x>10;
	end loop;
end;

declare
	v_x number(4) :=1;
	begin
	loop
	dbms_output.put_line(v_x);
	v_x := v_x+1;
	if(v_x>10) then
	exit;
	end if;
	end loop;
end;
2. while loop
declare
	v_x number(4) :=1;
	begin
	while v_x<=10 loop
	dbms_output.put_line(v_x);
	v_x := v_x+1;
	end loop;
end;
3. for...loop
begin
	for i in 1.. 10 loop
	dbms_output.put_line(i);
	end loop;
end;
## 游标
## 过程
- 返回系统日期
create or replace procedure getDate1(p_date out varchar2)
is
begin
	p_date := to_char(sysdate,'yyyy-mm-dd');
end;

declare
	v_date varchar2(12);
begin
	getDate1(v-date);
	dbms_output.put_line(v_date);
end;
- 过程与函数的区别：
过程没有返回值，而函数必须要有返回值










