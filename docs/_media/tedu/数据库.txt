###主流关系型数据库介绍
1. MySQL： 08年被sun公司收购 09年sun被oracle收购，开源免费，到oracle发布了5.0版本（使用了oracle核心技术 性能提高30%），因为Oracle数据库地位受到威胁，计划把mysql闭源，原mysql作者们不干了，原程序员出去单干 发布了MariaDB数据库 名字是因为作者女儿叫Maria ，市场排名第一
2. Oracle： 闭源， 最贵 性能最高 拉里埃里森32 市场排名第二
3. SQLServer：微软公司的产品 市场排名第三，主要应用在.net(C#)开发的网站中
4. DB2： IBM公司 有做网站的完整解决方案（操作系统，we服务器（如tomcat），数据库等）主要应用在银行等国有大型企业中
5. sqlite：轻量级数据库 只有几十k，一般应用在嵌入式和移动设备中
###开源和闭源的区别
1. 开源： 开发源代码，盈利方式靠卖服务（赚钱慢，少），用户群大，大牛程序员会无偿帮着升级维护 
2. 闭源：不开放源代码，盈利方式卖产品+服务（赚钱快，多），大牛们各种攻击找漏洞 
###数据库的安装
- 两点注意： 端口号默认3306，字符集选择utf-8

###SQL
	Structured Query Language:结构化 查询 语言
- sql是写在客户端 执行在DBMS中，DBMS解析后执行
###打开数据库客户端 并登陆
- 在终端中执行以下命令
mysql -uroot -p  敲回车  因为没有密码 所以再次敲回车 如果有密码则先敲密码再回车
- 退出命令： exit;

-------------------------------------------------------------------------------------------------------------------------------------------------第一天-------------------------------------------------------------------------------------------------------------------------------------------------------------------

数据库相关的SQL
1、查看所有数据库:
	show databases;
2、创建数据库:
	create database 数据库名称;
	create database db1;
3、查看数据库详情：
	show create database 数据库名称;
	show create database db1;
4、创建数据库指定字符集 utf8 或 gbk;
	- create database db5 character set gbk;创建
	- show create database db5;查看所创建的数据库
5、删除数据库
	- drop database db2;
练习：把刚才自己创建的都删除，然后再创建db1,db2 字符集为gbk，db3,然后查看db2是否查看，然后把db2和db3删除

6、使用数据库：use db1;

和表相关的SQL
- 什么是表：关系型数据库中保存数据的单元，类似于Excel中的表，创建表时需要指定字段信息。
- 创建表
	- 格式：create table 表名（字段1名 字段1类型，字段2名 字段2类型）;
	- 如：create table person(name varchar(10),age int);
- 练习：创建一个员工表（emp） 有名字（ename）和工资（sal）
	create table emp(ename varchar(10),sal int);
- 练习：创建一个学生表（student）有学号（id）姓名（name）性别（gender）语文（chinese）数学（math）英语（english）
	create table student(id int,name varchar(10),gender varchar(10),chinese int,math int,english int);
- 查询所有表
	show tables;
- 查看单个表属性
	show create table person;

表的引擎(engine)
- Myisam：只支持数据基础的增删改查，不支持高级操作，如：事务、外键等。
- InnoDB：支持高级操作，默认为InnoDB。
创建表并指定引擎和字符集
	create table t1(id int,name varchar(10))engine=myisam charset=gbk;
	- 查询：show create table t1;
查看表字段信息
	- desc student;
练习：创建五个数据库，每个里面创建一张表，第三个数据库字符集为gbk 里面的表引擎为myisam，创建完后全部删除。
- 对创建好的表进行修改

	- 修改表名
	rename table 原名 to 新名；
	rename table student to t_tu;

	- 修改表属性 引擎和字符集
	alter table hero engine=myisam charset=gbk;

	- 添加表字段
	alter table hero add age int;最后面添加
	alter table hero add money int first;最前面添加
	alter table hero add gender varchar(5) after name;在某个字段的后面添加
	
	- 删除表字段
	alter table hero drop money;

	- 修改表字段名和类型
	alter table hero change 原字段名 新字段名 类型；
	alter table hero change name heroname varchar(10);

	- 修改表字段类型和位置
	alter table hero modify age int first;
	alter table hero modify age int after xxxx;
	- 删除表
	drop table hero;

练习：
1. 创建员工表(emp) 字段有 id和name
	create table emp(id int,name varchar(10));
2. 修改emp表的引擎为myisam 字符集为gbk
	alter table emp engine=myisam charset=gbk;
3. 修改表名为 t_emp
	rename table emp to t_emp;
4. 给t_emp添加age字段在id的后面
	alter table t_emp add age int after id;
5. 给t_emp添加工资sal字段在最后
	alter table t_emp add sal int;
6. 修改sal字段名称为salary
	alter table t_emp change sal salary int;
7. 修改age字段到salary字段的后面
	alter table t_emp modify age int after salary;
8. 删除salary字段
	alter table t_emp drop salary;
9. 删除 t_emp表
	drop table t_emp;

数据相关的SQL		在终端中给数据库设置解码形式，这时需要字符的编解码，数据库保存数据时也需要字符的编解码，Linux电脑保存中文数据只需确认数据库和表是否同一为utf-8
			个人电脑如果是windows系统需要保证数据库和表为utf-8之外，还需要在命令行中执行set names gbk;通知数据库客户端传过去的内容需要使用gbk解码。

- 插入数据：创建学生表,插入数据 
	- 全表插入：每个字段都赋值顺序要和表字段一致  insert into student values(1,'zhangsan',88,38,98);
	- 指定字段插入： insert into student(id,name) values(2,'张飞');
练习：插入刘备 id为3 语数外成绩 78，22，18 插入关羽 id为4 语文90 插入孙悟空 id为5 英语18
	insert into student values(3,'刘备',78,22,18);
	insert into student(id,name,chinese) values(4,'关羽',90);
	insert into student(id,name,english) values(5,'孙悟空',18);

	- 批量插入
	insert into student values(6,'唐僧',56,57,58),(7,'八戒',88,89,99);
	insert into student(id,name) values(8,'吕布'),(9,'貂蝉'),(10,'孙尚香');
	
	- 查询
	查询全部 数据的全部字段信息：select * from student;
	查询指定字段：select id,name from student;
	条件查询：select * from student where id<5;
- 修改数据
	update student set math=100;
	update student set english=30 where id=7;

- 删除数据
	delete from student where id=7;
	delete from student ;

练习：
1. 创建t_emp表 有 id 名字name 工资sal 如果之前存在t_emp先删除
	create table t_emp(id int,name varchar(10),sal int);
2. 插入以下五条数据
	insert into t_emp values(1,'诸葛亮',3000),(2,'司马懿',4000),(3,'李白',8000),(4,'元芳',6000),(5,'狄仁杰',8000);
3. 修改工资8000的为7888
	update t_emp set sal=7888 where sal=8000;
4. 修改元芳的名字为李元芳
	update t_emp set name='李元芳' where id=4;
5. 删除工资低于5000的
	delete from t_emp where sal<5000;
6. 删除所有数据
	delete from t_emp;
###编码问题
- sql语句在客户端中写完后需要通过网络发送给数据库服务器，这时需要字符的编解码，数据库保存数据时也需要字符的编解码
- 学校学生电脑保存中文数据只需要确认 数据库和表是否统一为utf8
- 个人电脑如果是windows系统需要保证数据库和表为utf8 之外 还需要在命令行中 执行 set names gbk; 通知数据库客户端传过去的内容需要使用gbk解码。

数据库相关指令
show databases;
create database db1;
show create database db1;
create database db1 character set gbk/utf8;
drop database db1;
use db1;
表相关的指令
(1)创建表
create table t1(id int,name varchar(10));
show tables;
show create table t1;
create table t1(id int,name varchar(10))engine=myisam/innodb charset=gbk;
desc t1;
（2）修改表
rename table t1 to t2;
alter table t1 engine=myisam/innodb charset=gbk;
alter table t1 add age int first/after xxx;
alter table t1 drop age;
alter table t1 change age fatherage int;
alter table t1 modify age int first;
drop table t1;
数据相关指令
insert into t1 values(值1,值2,值3);
insert into t1(字段1名,字段2名) values(值1,值2);
insert into t1 values(值1,值2,值3),(值1,值2,值3);
insert into t1(字段1名,字段2名) values(值1,值2),(值1,值2),(值1,值2);
select * from t1;
select name,age from t1;
select * from t1 where age<20;
update t1 set age=18,sal=3000 where id=3;
delete from t1 where id=3;

--------------------------------------------------------------------------------------------------------------------------------------------------第二天--------------------------------------------------------------------------------------------------------------------------------------------------------------------
###主键约束
- 给主键添加约束，起到非空并且唯一的作用，主键指表示数据唯一性的字段，一张表中只有一个主键

- 如何使用：
	create table t1(id int primary key,name varchar(10));
- 测试 以下代码第二行报错因为id重复了
- 主键约束+自增
	create table t2(id int primary key auto_increment,name varchar(10));
- 自增总结
1. 表内自增的数值 自增不减
2. 清空表的数据 数值不归零 继续增长
3. 数值以出现过的最大值的基础+1

###注释 comment
- 注释  可以在创建表添加字段的时候对字段进行介绍，便于以后查看表的时候知道每个字段的作用。
- 如何使用：
	create table t3(id int primary key auto_increment comment '这是个主键',name varchar(10),comm int comment '这是奖金');
	show create table t3;
### ` ' 区别
- `的作用是用来修饰表名和字段名，可以省略
- '的作用是用来修饰字符串的

###数据的冗余
- 什么是冗余：如果设计表不够合理，随着数量的增加，出现大量的重复数据，称为数据的冗余。

####练习：
1.创建商品表	price单价 num库存 category_id分类id
	create table item(id int primary key auto_increment,name varchar(10),price int,num int,category_id int);
2. 创建分类表
	create table category(id int primary key auto_increment,name varchar(10));
mmp(id int 
	insert into item values(null,'苹果手机',5888,200,1),(null,'dell电脑',4000,150,2),(null,'联想电脑',3500,100,2);

	create table emp(id int primary key auto_increment,name varchar(10),sal int,age int,dept_id int);
	create table dept(id int primary key auto_increment,name varchar(10),parent_id int);
	insert into emp values(null,'苍老师',200,18,1),(null,'李白',100,20,2);

###事务
- 事务是数据库中执行sql语句的最小工作单元
- 如何开启事务：关闭客户端自动提交，改成手动提交，把多次修改数据库的sql放在一次提交中，则多次操作数据库的sql就相当于是放到了同一个事务中。
- 数据库默认的提交方式是自动提交
- 为什么使用事务？
	如果不使用事务，客户端会自动提交，多次操作数据库做某一件事儿的时候（如：转账）会出现部分成功部分失败，则数据会出现异常。使用事务，把多次操作数据库的sql合并到一次提交中，这样就能保证同时成功或失败。
- 使用事务的执行过程？
1. 关闭自动提交
2. 执行多次sql（在内存中执行）
3. 手动提交

####查看客户端自动提交的状态
	show variables like '%autocommit%';
####关闭自动提交 仅对当前窗口生效
- 关闭：
	set autocommit=0;
- 打开：
	set autocommit=1;


创建表
	create table person(id int primary key auto_increment,name varchar(10),money int);
插入数据
	insert into person values(null,'超人',200),(null,'蝙蝠侠',10000);
关闭自动提交
转账
	update person set money=500 where id=1;
	update person set money=9700 where id=1;
打开新的窗口 验证是否转账成功？ 数据没有变 因为两次操作都是在内存中操作 并未提交

手动提交 commit；

####数据回滚
- 执行rollback会将数据回滚到上次提交的点
- 验证回滚：
1. 修改一次数据
2. 查看数据 发现已经在内存中改了
3. 执行rollback
4. 查询发现回到了上次提交的点
####设置回滚点
1. 保存回滚点：savepoint s1(标识);
2.回滚到指定的回滚点：rollback to s1;
- 验证回滚：
1. 先将超人500改成600
2. 保存回滚点 s1
3. 将超人钱从600改成700
4. 回滚到s1 如果超人的钱 为600则说明成功！

###SQL分类 五类
####DDL Data Definition Language 数据定义语言，包括：create,alter,drop,truncate，不支持事务。
####DML Date Manipulation Language 数据操作语言，包括：insert，update,delete,select(DQL),支持事务
####DQL Data Query Language数据查询语言，包括：select,和事务没有关系
####TCL Transaction Control Language:事务控制语言，包括：commit rollback savepoint
####DCL Data Control Language:数据控制语言，分配用户权限相关的sql 
#####truncate 删除表 并且创建一个新表
- 用法：truncate table t1;
####truncate,delete,drop的区别
1. delete：删除表中的数据  自增数值不清零 支持事务
2. drop：删除表 不支持事务
3. truncate：删除表，并创建一个新表，自增数值清零，不支持事务

###数据库的数据类型
- 五种数据类型分别为：
1. 整数
2. 浮点数
3. 字符串
4. 日期
5. 其它
####整数
- 常用：int(m) bigint(m),m代表显示长度，如果数据长度不足m时会在数值前面补0，但是必须和zerofill关键字结合使用，使用方式如下：
	例如：    create table t_int(num int(10) zerofill);
		insert into t_int values(25);
		select * from t_int;
####浮点数
- 常用：
1. double(m,d):m代表总长度 d代表小数长度
	75.233 double(5,3);
	- 测试：create table t_double(num double(5,3)); insert into t_double values(12.3456);//四舍五入  insert into t_double values(1.23);//不足3则补零
2. decimal(m,d):m代表总长度 d代表小数长度,超高精度小数，需要设计超高精度运算的时候使用。
####字符串
- char(m):m代表字符长度，固定长度， 执行效率高（不用改变长度），最大长度255
- varchar(m)：m代表字符长度，可变长度，会根据内容长度改变自身长度，更节省资源，用的多，最大长度65535，如果长度超过255建议使用text。
- text：可变长度，最大值65535.
####日期
- date：只能保存 年月日
- time：只能保存 时分秒
- datetime：年月日时分秒，默认值为null，最大值为9999年12月31日
- timestamp：年月日时分秒，默认值为当前时间，最大值为2038年01月19号
- 测试：create table t_date(t1 date,t2 time,t3 datetime,t4 timestamp);
	insert into t_date values('2018-05-16',null,null,null);
	select * from t_date;
	insert into t_date values(null,'12:32:18','2018-05-11 18:30:08',null);
----------------------------------------------------------------------------------------------------------------------------------------------第三天------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#### is null
1. 查询没有上级领导的员工编号，姓名，工资
		select empno,ename,sal from emp
		where mgr is null;
2. 查询emp表中没有奖金(comm)的员工姓名，工资和奖金
		select ename,sal,comm from emp
		where comm is null;
####is not null 不为null
1. 查询emp表中有奖金的员工所有信息
		select * from emp 
		where comm is not null;
#### 别名
1. 查询emp中所有姓名 将ename 显示成'姓名'
	select ename as '姓名' from emp;
	select ename '姓名' from emp;
	select ename 姓名 from emp;
#### 去重
1. 查询emp表中出现的所有职位
	select distinct job from emp;
#### 比较运算符>,<,>=,<=,=,!=和<>
1. 查询工资小于等于1600的所有员工姓名和工资
	select ename,sal from emp where sal<=1600;
2. 查询部门编号是20的所有员工姓名、职位和部门编号deptno
	select ename,job,deptno from emp where deptno=20;
3. 查询职位是manager的所有员工姓名和职位
	select ename,job from emp where job='manager';
4. 查询部门不是10号部门的所有员工姓名和部门编号，使用两种方式实现
	select ename,deptno from emp where deptno!=10;
	select ename,deptno from emp where deptno<>10;
5. 查询t_item表中单价等于23的商品信息
	select * from t_item where price=23;
6. 查询t_item表中单价不等于8443的商品信息
	select * from t_item where price!=8443;
#### and 和 or
- and 和Java中的&&效果一样
- or 和Java中的 || 效果一样
1. 查询不是10号部门并且工资小于3000的员工信息
	select * from emp where deptno!=10 and sal<3000;
2. 查询部门编号为30或者上级领导为7698的员工姓名，职位，上级领导和部门编号
	select ename,job,mgr,deptno from emp where deptno=30 or mgr=7698;
#### in
1. 查询emp表中工资为5000，1500，3000
	select * from emp where sal=5000 or sal=1500 or sal=3000;
	select * from emp where sal in(5000,1500,3000);
#### between x and y 在x和y之间 包括x和y
1. 查询emp表中 工资在2000至4000之间的员工信息
	select * from emp where sal between 2000 and 4000;
#### like
- _:代表单个未知字符
- %：代表0个或多个未知字符
- 举例：
1. 包含字符a：     %a%
2. 以a开头：        a%
3. 以a结尾：        %a
4. 第二个字符是a： _a%
5. 倒数第三个字符是a： %a__
6. 第二个字符是a，最后一个字符是b： _a%b
##### like案例
1. 查询标题中包含记事本的商品title
	select title from t_item where title like '%记事本%';
2. 查询单价低于100的记事本（title包含记事本）标题和单价
	select title from t_item where title like '%记事本%' and price<100; 
3. 查询单价在50到200之间的得力（title包含得力）商品
	select title,price from t_item where title like '%得力%' and price between 50 and 200;
4. 查询有图片（image字段不为null）的得力商品
	select * from t_item where title like '%得力%' and image is not null;
5. 查询分类（category_id）为238，917的商品信息
	select * from t_item where category_id in (238,917);
6. 查询含有赠品的商品信息(sell_point中包含赠字)
	select * from t_item where sell_point like '%赠%';
7. 查询标题中不包含得力的商品标题
	select title from t_item where title not like '%得力%';
8. 查询价格介于50到200之外的商品信息
	select * from t_item where price not between 50 and 200; 
###排序 order by
- order by 写在where后面 没有where 写在最后
- by 的后面写排序的字段名称
- 默认排序是升序，也可指定 升序：asc 降序：desc
- 举例：select name,age from person where age<50 order by age desc;
1. 查询所有员工的姓名和工资，按照工资降序排序
	select ename,sal from emp order by sal desc;
2. 查询所有dell商品，按单价降序排序
	select title,price from t_item where title like '%dell%' order by price desc; 
3. 查询所有员工信息按照部门编号升序排序，工资降序排序
	select * from emp order by deptno,sal desc;
#### 分页查询 limit
- limit 跳过数量，每页的数量 第5页 每页3条
	limit (页数-1)*每页条数，每页条数
	limit 12,3;
- limit 关键字通常写在sql的最后面
1. 查询所有商品 按照单价升序排序，显示第二页，每页7条数据
	select price from t_item order by price limit 7,7;
2. 查询工资金额前三名的三位员工信息
	select * from emp order by sal desc limit 0,3;
###数值计算 + - * / %   7%2 等效 mod(7,2)
1. 查询员工姓名，工资，及年终奖信息（年终奖=工资*5）；
	select ename,sal,sal*5 年终奖 from emp;
2. 查询t_item表中商品单价，库存和总金额（单价*库存）
	select price,num,price*num from t_item;
### 日期相关函数
select 'helloword';
- 获取当前日期+时间 now();
- 获取当前的日期 current：当前
	select curdate();
- 获取当前的时间
	select curtime();
- 从年月日时分秒中 提取年月日 和 提取时分秒
	select date(now());
	select time(now());
- 从年月日时分秒中 提取年,月,日,时,分,秒
	select extract(year from now());
	select extract(month from now());
	select extract(day from now());
	select extract(hour from now());
	select extract(minute from now());
	select extract(second from now());
- 日期格式化函数
	格式：date_format(date,format);
- formate:  %Y  四位年，%y 两位年， %m 两位月， %c 一位月， %d 日，%H 24小时，%h 12小时，%i 分，%s 秒 
1. 把now（）转换成 2018年06月19日 16时27分30秒的格式
	select date_format(now(),'%Y年%m月%d日%H时%i分%s秒');
- 把非标准格式的时间转换成标准格式
	str_to_date(非标准格式的时间，格式);
1. 把14.08.2008 08:00:00 转换成标准格式
	select str_to_date('14.08.2008 08:00:00','%d.%m.%Y %H:%i:%s');
### ifnull()函数 oracle数据库中用nvl(x,y)
	age=ifnull(x,y) 如果x的值为null则age=y ，如果x不为null则age的值为x 
1. 将emp表中奖金为null的全部修改为0
	update emp set comm=ifnull(comm,0); 
### 聚合函数
- 对多行数据进行统计
- 求和：sum(字段名);
	举例：emp中工资总和
		select sum(sal) from emp;
- 平均值：avg(字段名);
	select avg(sal) from emp where deptno=10; 
- 最大值：max(字段名);
	select max(sal) from emp where deptno=10; 
- 最小值：min(字段名);
	select min(sal) from emp where deptno=10; 
- 统计数量：count(*);count(1)
	select count(*) from emp where sal<1000;
### 字符串相关函数
1. 字符串拼接 concat(s1,s2) s1s2
- 案例：查询emp表中 员工姓名和工资  工资后面有单位元
	select ename,concat(sal,'元') from emp;
2. 获取字符串的长度 char_length(str)
- 案例：查询员工姓名和名字的长度
	select ename,char_length(ename) from emp;
3. 获取字符串在另外一个字符串中出现的位置  从1开始
	- 格式：instr(str,sunstr);
		select instr('abcdefg','d');
	- 格式2：locate(substr,str);
		select locate('d','abcdefg');
4. 插入字符串
	- 格式：insert(str,start,length,newstr);
		select insert('abcdefg',3,2,'m');
5. 转大写和转小写
	- 格式：upper(str) lower(str)
		select upper('Nba'),lower('NBA');
6. 从左边截取 和从右边截取
	- 格式：left(str,count); right(str,count);
		select left('abcdefg',2);
		select right('abcdefg',2);
7. 去字符串两端的空格
		select trim('    ab    ');
8. 截取字符串
	- 格式：substring(str,start,length);
		select substring('abcdefg',2);//从第二个开始截，截到最后
		select substring('abcdefg',2,3);//从第二个开始截，截三个
9. 重复 repeat(str,count)
		select repeat('ab',2);
10. 替换 replace(str,old,new);
		select replace('abcdefg','c','m');
11. 反转 reverse(str);
		select reverse('abc');

----------------------------------------------------------------------------------------------------------------------------------------------------第四天------------------------------------------------------------------------------------------------------------------------------------------------------------
###数学相关的函数
- floor(num)向下取整
	select floor(3.84);值为3
- round(num)四舍五入
	select round(23.8);值为24
- round(num,m)四舍五入 m代表小数位数
	select round(23.869,2);值为23.87
- truncate(num,m)和上面一样（非四舍五入）
	select truncate(23.869,2);值为23.86
- rand() 随机数  获取0-1的随机数
	select rand();
1. 获取 0-5的随机数
	select floor(rand()*6);
2. 获取 3-8的随机数
	select floor(rand()*6)+3;
3. 获取 8-10的随机数
	select floor(rand()*3)+8;
### 分组查询 group by   与having配合使用
- 分组查询通常和聚合函数结合使用
- 一般情况下 每个部门（职位、分类） 就以部门（职位、分类）作为分组的条件，可以有多个分组条件
1. 查询每个部门的最高工资
	select deptno,max(sal) from emp group by deptno;
2. 查询每个职位的平均工资
	select job,avg(sal) from emp group by job;
3. 查询每个部门下每个主管的手下人数
	select deptno,mgr,count(*) from emp where mgr is not null group by deptno,mgr;
- group by 存在的位置
	select * from emp
	where ........
	group by .....
	order by .....
	limit ........
53. 案例：查询emp表中每个部门的编号，人数，工资总和，最后根据人数进行升序排列，如果人数一致，根据工资总和降序排列。
	select deptno,count(*),sum(sal) from emp
	group by deptno
	order by count(*),sum(sal) desc;
54. 案例：查询工资在1000~3000之间的员工信息，每个部门的编号，平均工资，最低工资，最高工资，根据平均工资进行升序排列。
	select deptno,avg(sal),min(sal),max(sal) from emp 
	where sal between 1000 and 3000
	group by deptno
	order by avg(sal);
55. 案例：查询含有上级领导的员工，每个职业的人数，工资的总和，平均工资，最低工资，最后根据人数进行降序排列，如果人数一致，根据平均工资进行升序排列
	select job,count(*) c,sum(sal),avg(sal) a,min(sal) from emp
	where mgr is not null
	group by job
	order by c desc,a;
###
1. 查询每个部门的平均工资，要求平均工资大于2000。
- 以下为错误语法： where后面不能写聚合函数
		select deptno,avg(sal) a from emp
		where a>2000
		group by deptno;
- 使用having 解决聚合函数的条件过滤问题，having写在group by 后面
- where后面写普通字段的过滤条件，having后面写聚合函数的过滤条件
		select deptno,avg(sal) a from emp
		group by deptno
		having a>2000;	
1. 查询每个分类商品的库存总量，高于199999的库存总量
	select category_id,sum(num) 库存总量 from t_item group by category_id having 库存总量>199999; 
2. 查询每个分类商品所对应的平均单价，要求平均单价低于100
	select category_id,avg(price) 平均单价 from t_item group by category_id having 平均单价<100;
3. 查询分类id为238和917两个分类的平均单价
	select category_id,avg(price) from t_item where category_id in(238,917) group by category_id;
4. 查询emp表中每个部门的平均工资高于2000的部门编号，部门人数，平均工资，最后根据平均工资降序排序
	select deptno,avg(sal) 平均工资,count(*) from emp group by deptno having 平均工资>2000 order by 平均工资 desc;
5. 查询emp表中工资在1000-3000之间的员工，每个部门的编号，工资总和，平均工资，过滤掉平均工资低于2000的部门，按照平均工资升序排序
	select deptno,sum(sal),avg(sal) from emp where sal between 1000 and 3000 group by deptno having avg(sal)>=2000 order by avg(sal);
6. 查询emp表中名字不是以s开头，每个职位的名字，人数，工资总和，最高工资，过滤掉平均工资是3000的职位，根据人数升序排序，如果一致根据工资总和降序排序
	select job,count(*),sum(sal),max(sal) from emp where ename not like '%s%' group by job having avg(sal)!=3000 order by count(*),sum(sal) desc;
7. 查询emp表，每年入职的人数（提高题）
	select extract(year from hiredate) year,count(*) from emp group by year;

### 子查询(嵌套查询)

1. 查询emp表中工资最高的员工信息
	select * from emp where sal=(select max(sal) from emp);
	
	//select * from emp order by sal desc limit 0,1;
	//select * from emp having max(sal);
 2. 查询emp表中工资超过平均工资的所有员工信息
	select * from emp where sal>(select avg(sal) from emp);
3. 查询工资高于20部门平均工资的员工信息
	select *  from emp where sal>(select avg(sal) from emp where deptno=20);
4. 查询和Jones相同工作的其他员工信息
	select * from emp where job=(select job from emp where ename='Jones') and ename!='Jones';
5. 查询工资最低的员工的相同部门的员工信息
	select * from emp where deptno=(select deptno from emp where sal=(select min(sal) from emp));
	select * from emp where deptno=(select deptno from emp where sal=(select min(sal) from emp)) and sal!=(select min(sal) from emp);//不包含当前的最低员工
	- having 要和 group by 结合使用
6. 查询最后入职的员工信息
	select * from emp where hiredate=(select max(hiredate) from emp);
7. 查询姓名为king的部门编号和部门名称（需要使用dept表）
	select deptno from emp where ename='king';
	select deptno,dname from dept where deptno=(select deptno from emp where ename='king');
8. 查询有商品的分类id和分类名称（由商品  就是在商品表中出现的分类，需要使用t_item_category表）
	- 先从商品表中得到所有的分类id
		select distinct category_id from t_item;
	- 从分类表中查询id等于上面结果的分类信息
		select id,name from t_item_category where id in(select distinct category_id from t_item);
9. 查询有员工的部门信息
	select distinct deptno from emp;
	select * from dept where deptno in(select distinct deptno from emp);
10. 扩展题（难度最高）：查询平均工资最高的部门信息
- 得到最高的平均工资
		select avg(sal) a from emp group by deptno order by a desc limit 0,1;
- 通过最高的平均工资 得到 部门的编号
		select deptno from emp group by deptno having avg(sal)=(select avg(sal) a from emp group by deptno order by a desc limit 0,1); 
- 通过部门编号得到部门信息
		select * from dept where deptno in(select deptno from emp group by deptno having avg(sal)=(select avg(sal) a from emp group by deptno order by a desc limit 0,1));
### 子查询总结
1. 嵌套在SQL语句中查询语句称为子查询
2. 子查询能套n层
3. 子查询可写的位置
- 可以写在 where/having的后面作为查询条件的值
- 可以写在 from后面 当一张新表   **新表必须有别名**
- 可以写在创建表的时候  create table t_emp_10 as (select * from emp where deptno=10);
### 关联查询
- 同时查询多张表的数据称为关联查询 
1. 查询每一个员工的姓名和对应的部门名称
		select e.ename,d.dname from emp e,dept d where e.deptno=d.deptno;
2. 查询在纽约工作的所有员工的信息
		select e.* from emp e,dept d where e.deptno=d.deptno and d.loc='new york';
### 笛卡尔积
- 关联查询如果不写关联关系，则查询关系为两张表的乘积，这个乘积称为 笛卡尔积
- 笛卡尔积是一种错误的查询结果，工作中切记不要出现

### 等值连接和内连接
1. 等值连接：
	select * from A,B where A.x=B.x and A.age=18;
2. 内连接	用的更多
	select * from A join B on A.x=B.x where A.age=18;
- 查询每个员工的姓名和对应的部门姓名
	select e.ename,d.dname from emp e join dept d on e.deptno= d.deptno;
### 外连接
select 要显示的字段数据 from 表名 别名 left(或者right) join 表名 别名 on 关联条件;
- 左外连接：select e.ename,d.dname from emp e left join dept d on e.deptno= d.deptno; 以join 左边表为主表 左边表显示所有数据 右边交集数据
- 右外连接：select e.ename,d.dname from emp e right join dept d on e.deptno= d.deptno;以join 右边表为主表 右边表显示所有数据 左边交集数据
### 关联查询总结：
	- 等值连接，内连接，外连接都是关联查询的查询方式，使用哪一种取决于具体业务需求
1. 查两个表的交集数据 使用内连接（推荐）或等值连接
2. 查一个表所有数据另外一个表交集数据使用外连接

###作业：
1. 每个部门的人数,根据人数排序
	 select deptno,count(*) c from emp group by deptno order by c;
2. 每个部门中，每个主管的手下人数
	 select deptno,mgr,count(*) from emp where mgr is not null group by deptno,mgr;
3. 每种工作的平均工资
	 select job,avg(sal) from emp group by job;
4. 每年的入职人数 
	 select extract(year from hiredate) year,count(*) from emp group by year;
5. 少于等于3个人的部门信息*****
 	- 子查询：1. 先得到部门人数：select * from dept where deptno in(select deptno from emp group by deptno having count(*)<=3);
	- 内连接：select d.* from dept d join (select * from dept where deptno in(select deptno from emp group by deptno having count(*)<=3)) n on d.deptno=n.deptno;
6. 拿最低工资的员工信息
	 select * from emp where sal=(select min(sal) from emp);
7. 只有一个下属的主管信息*****
 		- 得到主管编号：select mgr from emp group by mgr having count(*)=1;
				select * from emp where empno in(select mgr from emp group by mgr having count(*)=1);
	7. 只有一个员工的部门信息
		select deptno from emp group by deptno having count(*)=1;
		select * from dept where deptno in(select deptno from emp group by deptno having count(*)=1;);
8. 平均工资最高的部门编号
	     select deptno from emp group by deptno order by avg(sal) desc limit 0,1;
9. 下属人数最多的人，查询其个人信息*****
 	- 得到下属人数 并且取出最多的人数
		select count(*) from emp group by mgr order by count(*) desc limit 0,1;
	- 通过得到的人数 查询哪个主管下属是这个数
		select mgr from emp group by mgr having count(*)=(select count(*) from emp group by mgr order by count(*) desc limit 0,1);
	- 查询个人信息
		select * from emp where empno in(select mgr from emp group by mgr having count(*)=(select count(*) from emp group by mgr order by count(*) desc limit 0,1));
10. 拿最低工资的人的信息
	select * from emp where sal=(select min(sal) from emp);
11. 最后入职的员工信息
	  select * from emp where hiredate=(select max(hiredate) from emp); 
12. 工资多于平均工资的员工信息
	  select * from emp where sal>(select avg(sal) from emp);
13. 查询员工信息，部门名称
        select e.*,d.name from emp e join dept d on e.deptno=d.deptno;
14. 员工信息，部门名称，所在城市
        select e.*,d.name,d.loc from emp e join dept d on e.deptno=d.deptno;
15. DALLAS 市所有的员工信息
	- 子查询：select deptno from dept where loc='dallas';
		  select * from emp where deptno=(select deptno from dept where loc='dallas'); 
	- 内连接：select e.* from emp e join dept d on e.deptno=d.deptno where d.loc='dallas';
16. 按城市分组，计算每个城市的员工数量
	select d.loc,count(*) from emp e join dept d on e.deptno=d.deptno group by d.loc; 
17. 查询员工信息和他的主管姓名 将emp表看成两张表
	 select e.*,m.ename from emp e join emp m on e.mgr=m.empno;
18. 员工信息，员工主管名字，部门名 用join on添加多张表的关联关系
	 select e.*,m.ename,d.dname from emp e join emp m on e.mgr=m.empno join dept d on e.deptno=d.deptno;
20. 员工和他所在部门名
	select e.*,d.dname from emp e join dept d on e.deptno=d.deptno; 
21. 案例：查询emp表中所有员工的姓名以及该员工上级领导的编号，姓名，职位，工资
	select e.ename,m.empno,m.ename,m.job,m.sal from emp e left join emp m on e.mgr=m.empno; 
22. 案例：查询emp表中名字中没有字母'K'的所有员工的编号，姓名，职位以及所在部门的编号，名称，地址
	select e.empno,e.ename,e.job,d.deptno,d.dname,d.loc from emp e left join dept d on e.deptno=d.deptno where e.ename not like '%k%'; 
23. 案例：查询dept表中所有的部门的所有的信息，以及与之关联的emp表中员工的编号，姓名，职位，工资
 	select d.*,e.empno,e.ename,e.job,e.sal from dept d left join emp e on d.deptno=e.deptno;


---------------------------------------------------------------------------------------------------------------------------------------------------第五天--------------------------------------------------------------------------------------------------------------------------------------------------------------
### 表关系 关联关系

#### 一对一
- 什么是一对一：两张表A表和B表，A表中一条数据对应B表中的一条数据，这种关系称为一对一的关系
- 应用场景：用户表和用户信息扩展表  商品表和商品信息扩展表
- 如何建立关系：在从表中添加一个外键字段值指向主表的主键字段
##### 练习：
1. 创建user(id,username,password)和userinfo(nick,qq,phone,user_id)
create table user(id int primary key auto_increment,username varchar(10),password varchar(10));
create table userinfo(nick varchar(10),qq varchar(20),phone varchar(20),user_id int);
2. 两个表中各插入三条数据
	wukong  bajie  wujing
	insert into user values(null,'wukong','123'),(null,'bajie','456'),(null,'wujing','789');
	insert into userinfo values('悟空','131','110',1),('八戒','132','119',2),('悟净','133','120',3);
3. 查询每个用户的所有信息
	select * from user u join userinfo ui on u.id=ui.user_id;
4. 查询名字叫悟空的用户和密码
	select u.username,u.password from user u join userinfo ui on u.id=ui.user_id where ui.nick='悟空'; 
	
	
#### 一对多
- 什么是一对多：AB两张表，A表中一条数据对应B表中多条数据，B表中一条数据对应A表中一条数据，称为一对多
- 应用场景：部门和员工，分类和商品等
- 如何建立关系：一对多的两张表，在多的表里面添加外键记录，另外一个表主键值
##### 练习
1. 创建t_emp(id,name,deptid)和t_dept(id,name,loc)
	create table t_emp(id int primary key auto_increment,name varchar(10),deptid int);
	create table t_dept(id int primary key auto_increment,name varchar(10),loc varchar(10));
2. 表中插入数据  部门表：神仙地址为天上  妖怪部地址为盘丝洞，员工表插入  孙悟空，猪八戒，蜘蛛精，白骨精
	insert into t_dept values(null,'神仙部','天上'),(null,'妖怪部','盘丝洞');	
	insert into t_emp values(null,'孙悟空',1),(null,'猪八戒',1),(null,'蜘蛛精',2),(null,'白骨精',2);
3. 查询每个部门对应的每个员工
	select * from t_dept d join t_emp e on d.id=e.deptid;
4. 查询盘丝洞工作的所有员工姓名
	select e.name from t_dept d join t_emp e on d.id=e.deptid where d.loc='盘丝洞';
5. 查询孙悟空的工作地点和部门名称
	select d.name,d.loc from t_dept d join t_emp e on d.id=e.deptid where e.name='孙悟空';
#### 多对多
- 什么是多对多：AB两张表，A表中一条对应B表的多条数据，同时B表中的一条数据对应A表的多条数据称为多对多的关系。
- 应用场景：老师和学生的关系  用户表和角色表
- 如何建立关系：需要创建单独的一个关系表，关系表中两个外键字段保存两个表的主键值。
#####练习：
1. 创建三个表：student(id,name) teacher(id,name) t_s(sid,tid)
	create table student(id int primary key auto_increment,name varchar(10));
	create table teacher(id int primary key auto_increment,name varchar(10));
	create table t_s(sid int,tid int);
2. 插入以下数据，苍老师对应的学生：小明，小红，小花；刘老师对应的老师：小绿，小蓝，小明
	insert into student values(null,'小明'),(null,'小红'),(null,'小花'),(null,'小绿'),(null,'小蓝');
	insert into teacher values(null,'苍老师'),(null,'刘老师');
	insert into t_s values(1,1),(2,1),(3,1),(4,2),(5,2);
3. 查询每个老师对应的所有学生
	select t.name,s.name from student s join t_s ts on s.id=ts.sid join teacher t on t.id=ts.tid; 
4. 查询小明的老师都有谁
	select t.name from student s join t_s ts on s.id=ts.sid join teacher t on t.id=ts.tid where s.name='小明';
5. 查询苍老师的所有学生
	select s.name from student s join t_s ts on s.id=ts.sid join teacher t on t.id=ts.tid where t.name='苍老师'; 
#### 自关联
- 什么是自关联：在表中有一个外键字段指向自己表的主键值，称为自关联。
- 应用场景：需要保存层级关系，但是不确定有多少层的时候使用自关联
1. 查询员工姓名和对应夫人上级主管姓名
	select e.ename,m.ename from emp e join emp m on e.mgr=m.empno;
#### 连接方式和关联关系
1. 连接方式：包括内连接和外连接（左外，右外），是关联查询的查询方式。
2. 关联关系：包括一对一，一对多，多对多，是指设计表时两个表之间存在的逻辑关系。
### 案例： 权限管理的表设计
- 用户表 角色表 权限表
- 用户-角色关系表     角色-权限关系表 

1. 创建db4 并使用 创建五张表
	create table user(id int primary key auto_increment,name varchar(10));
	create table role(id int primary key auto_increment,name varchar(10));
	create table module(id int primary key auto_increment,name varchar(10));
- 创建关系表
	create table u_r(uid int,rid int);
	create table r_m(rid int,mid int);
- 插入数据
	insert into user values(null,'刘德华'),(null,'张学友'),(null,'凤姐');
	insert into role values(null,'男游客'),(null,'男会员'),(null,'女游客'),(null,'女管理员');
	insert into module values(null,'男浏览'),(null,'男发帖'),(null,'女浏览'),(null,'女发帖'),(null,'女删帖');
- 插入关系数据
	insert into u_r values(1,1),(2,2),(3,4),(3,2);
	insert into r_m values(1,1),(2,1),(2,2),(3,3),(4,3),(4,4),(4,5);
1. 查询每个用户对应的权限
	select u.name,m.name from user u join u_r ur on u.id=ur.uid join r_m rm
	on ur.rid=rm.rid
	join module m
	on m.id=rm.mid;
2. 查询张学友的所有权限
	select m.name
	from user u join u_r ur
	on u.id=ur.uid
	join r_m rm
	on ur.rid=rm.rid
	join module m
	on m.id=rm.mid
	where u.name='张学友';
3. 查询有男发帖的用户都有哪些
	select u.name
	from user u join u_r ur
	on u.id=ur.uid
	join r_m rm
	on ur.rid=rm.rid
	join module m
	on m.id=rm.mid
	where m.name='男发帖';

---------------------------------------------------------------------------------------------------------------------------------------------------第六天--------------------------------------------------------------------------------------------------------------------------------------------------------------
###面试题
1. 创建两张表
- 创建trade交易流水表（id,time,money,type,pid）
	create database db6;
	use db6;
	create table trade(id int primary key auto_increment,time date,money int,type varchar(5),pid int);
- 创建person人物表（id,name,gender,rel）
	create table person(id int primary key auto_increment,name varchar(10),gender varchar(5),rel varchar(5));
2. 插入数据
	insert into person values(null,'刘德华','男','亲戚'),(null,'杨幂','女','亲戚'),(null,'马云','男','同事'),(null,'特朗普','男','朋友'),(null,'貂蝉','女','朋友');
	insert into trade values(null,'2018-03-20',-20,'微信',1),
	(null,'2018-04-20',500,'现金',2),
	(null,'2018-05-20',-50,'现金',2),
	(null,'2018-03-21',50000,'支付宝',3),
	(null,'2018-03-22',-5,'支付宝',3),
	(null,'2018-03-26',2000,'微信',4),
	(null,'2018-04-22',-20000,'微信',5);
3. 统计2018年2月15号到现在的所有红包收益 
	select sum(money) from trade 
	where time>str_to_date('2018年2月15号','%Y年%c月%d号');
4. 查询2018年2月15号到现在 金额大于100 所有女性亲戚的名字和红包金额
	select p.name,t.money
	from trade t join person p
	on t.pid=p.id
	where t.money not between -100 and 100
	and t.time>str_to_date('2018年2月15号','%Y年%c月%d号') and p.gender='女' 
	and p.rel='亲戚';
5. 查询三个平台分别收入的红包金额
	select type,sum(money) from trade
	where money>0
	group by type;

###视图
- 什么是视图： 数据库中表和视图都是其内部的对象，视图可以理解成一个虚拟的表，视图本质就是取代了一段sql查询语句。
- 为什么使用视图：因为有些数据的查询需要使用大量的sql语句，每次书写比较麻烦，使用视图可以起到sql重用的作用，可以隐藏表中的敏感信息。
- 如何使用：
		格式：create view 视图名 as 子查询;
1. 练习1：创建部门是20并且工资小于3000的视图
		create view v_emp_20 as (select * from emp where deptno=20 and sal<3000);
2. 练习2：创建每个部门的工资总和，平均工资，最大工资，最小工资的视图
		create view v_emp_dept_info as (select deptno,sum(sal), avg(sal), max(sal), min(sal) from emp group by deptno );
####视图的分类
1. 简单视图： 创建视图的子查询中不包含：去重，函数，分组，关联查询的视图称为简单视图，可以对数据进行增删改查操作
2. 复杂视图： 创建视图的子查询中包含：去重，函数，分组，关联查询的视图称为复杂视图，只能进行查的操作
####简单视图的增删改操作 操作方式和table一样
1. 插入数据 如果插入的数据在视图中不显示但是原表中显示，称为数据污染
	insert into v_emp_10 (empno,ename) 
	values(10010,'Tom');
	-正确写法
		insert into v_emp_10 (empno,ename,deptno)
		values(10086,'Jerry',10);
	-可以通过with check option 关键字禁止出现数据污染
		create view v_emp_30 as (select * from emp where deptno=30) with check option;
	-测试：
		insert into v_emp_30 (empno,ename,deptno) 
		values(10011,'张三',30);
		insert into v_emp_30 (empno,ename,deptno) 
		values(10012,'李四',20);
2. 修改数据 只能修改视图中存在的数据
	update v_emp_30 set ename='zhangsan' where empno=10011;(成功)
	update v_emp_30 set ename='汤姆' where empno=10010;（失败）
3. 删除数据 只能删除视图中存在的数据
	delete from v_emp_30 where empno=10011;
	delete from v_emp_30 where empno=10010;
###修改视图
- 格式： create or replace view 视图名 as 子查询;
	create or replace view v_emp_10 as(select * from emp);
###删除视图
	drop view v_emp_10;
	drop view if exists v_emp_10; 没有也不会报错

###视图别名
- 创建视图的时候子查询对字段起了别名，则后期对视图进行操作只能使用别名。
	create view v_emp_10 as (select empno,ename name from emp);
- 测试：
	update v_emp_10 set name='汤姆' where empno=10010;(成功)
	update v_emp_10 set ename='汤姆aaa' where empno=10010;（失败）
###视图总结：
1. 视图是数据库中的对象，代表一段sql，可以理解成虚拟表
2. 作用： 重用sql ， 隐藏敏感字段
3. 分类： 简单 和 复杂  简单（不包含去重 函数 分组 关联查询） 复杂反之只能查看
4. 插入数据时可能数据污染 通过with check option解决
5. 修改和删除只能操作视图中存在的数据
6. 起了别名 只能用别名
###约束
- 什么是约束：约束是给表字段添加的限制条件
####非空约束 not null
- 字段值不能为null	
	
	create table t1(id int,age int not null);
- 测试：
	insert into t1 values(1,20);（成功）
	insert into t1 values(2,null);(失败)
####唯一约束 unique
- 字段值不能重复
	create table t2(id int,age int unique);
- 测试：
	insert into t2 values(1,20);（成功）
	insert into t2 values(2,20); (失败)
####主键约束 primary key
- 字段值不能重复也不能为null
- 创建表的时候添加主键
	create table t_pri(id int primary key auto_increment); 
- 创建表后添加主键
	create table t_pri2(id int);

	alter table t_pri2 add primary key (id);
- 删除主键  一个表只能有一个主键
	alter table t_pri2 drop primary key;
###自增
1. 当字段的值为null的时候数值自动+1
2. 删除数据数值不减
3. 如果插入数据指定比较大的值，下次从最大值基础上+1，如果删除最大值，也是从曾经出现的最大值基础上+1
4. 使用delete删除全表数据 自增值不变
5. 使用truncate删除 自增数值清零
###默认约束 default
- 当字段的值不赋值的时候 默认约束的内容生效
	create table t_def(id int, age int default 10);
###检查约束 check
- mysql语法支持 不报错 但是没有效果
	
		create table t_check(id int,age int check(age>10));

###外键约束
- 作用：
1. 外键值可以为null，可以重复，但是不能是不存在的值
2. 外键指向的表，不能先删除
3. 外键指向的数据不能先删除，如果需要删除，先删除外键约束或先删除外键的数据（断开关联关系）

- 使用外键必须要求两张表相同的InnoDB引擎，myisam不支持外键约束

- 除非特定情况 一般工作中不使用外键约束，使用java代码通过逻辑对插入和删除的数据进行限制，因为加了外键约束后不方便测试

#####如何使用外键约束
1. 创建部门表
	create table dept(id int primary key auto_increment,name varchar(10));
2. 创建员工表
	create table emp(id int primary key auto_increment,name varchar(10),deptid int,constraint fk_dept foreign key(deptid) references dept(id));
- 内容介绍
	constraint 外键约束名 foreign key(外键字段) references 表名(主键)
- 插入数据
	insert into dept values(null,'神仙'),(null,'妖怪');
	- 测试：
	insert into emp values(null,'悟空',1);(成功)
	insert into emp values(null,'赛亚人',3);（失败）
	drop table dept;(失败)
	delete from dept where id=1;(失败)

###索引
####导入数据
在db6数据库下 执行source命令
- 学生机（linux）
	source /home/soft01/桌面/item_backup.sql;
- 个人电脑（windows）
	source d:/item_backup.sql;

测试：
1. show tables;  看是否有item2的表
2. select count(*) from item2;  看是否有172万
3. select * from item2 where title='100'; 看查询时间是多少    1.15秒 

- 什么是索引： 索引是数据库中用来提高查询效率的技术，类似于目录
- 为什么使用索引： 如果不使用索引数据会零散的保存在磁盘块中，查询数据需要挨个的遍历每一个磁盘块，直到找到数据为止，使用用索引后会在磁盘中以树状结构对数据进行保存，查询数据时会大大降低磁盘块的访问量，从而提高查询效率。
- 索引原理图（了解）
![](01.png)
####索引是越多越好吗？
索引会占用磁盘空间，只对常用的查询字段创建索引
####有索引就一定好吗？
不一定，如果数据量比较小，使用索引反而会降低查询效率
####索引的分类
1. 聚集索引：一张表只有一个聚集索引，数据库会自动为添加了主键的表创建聚集索引，一般情况下聚集索引就是通过主键值创建的索引，聚集索引的树状结构中保存了数据

2. 非聚集索引：一张表可以有多个非聚集索引，通过非主键字段创建的索引称为非聚集索引，非聚集索引中没有数据保存的是磁盘块的地址。
###如何创建索引
- 格式： create index 索引名 on 表名(字段名(长度));
- 创建title索引 (创建的是非聚集索引)

	create index index_item2_title on item2(title);
-测试：之前的时间1.1秒  添加索引后0.03 提高30多倍 
	select * from item2 where title='100';

####查看索引
	
	show index from item2;
####删除索引
	
	drop index index_item2_title on item2;

####复合索引
- 通过多个字段创建的索引称为复合索引
- 应用场景：频繁使用多个字段作为查询条件时，可以为这个几个字段创建一个复合索引
- 创建格式: create index index_item2_title_price on item2(title,price);

####索引总结
1. 索引是用来提高查询效率的技术，类似目录的作用
2. 因为会占空间不是越多越好
3. 数据量小时 会降低查询效率
4. 聚集索引自动通过主键创建 保存数据 只有一个 和非聚集索引 有多个 没有数据只有磁盘块地址
5. 尽量不要在频繁修改的表上创建索引

###事务
- 数据库中执行sql语句的最小工作单元，不能拆分，执行同一业务的sql语句可以保证全部成功或全部失败
###事务的ACID特性   ****面试常考****
- Atomicity：原子性，最小不可拆分 全部成功或全部失败
- Consistency：一致性，从一个一致状态到另一个一致状态
- Isolation：隔离性，多个事务之间互不影响 
- Durability：持久性，事务完成后数据提交到数据库中持久保存
####事务相关指令
1. 查看自动提交状态
	show variables like '%autocommit%';
2. 设置自动提交状态 
	set autocommit=0/1;
3. 提交
	commit;
4. 回滚
	rollback;
5. 保存回滚点
	savepoint s1;
6. 回滚到某个回滚点
	rollback to s1;

---------------------------------------------------------------------------------------------------------------------------------------------------第七天--------------------------------------------------------------------------------------------------------------------------------------------------------------

##JDBC
###什么是JDBC
- Java DataBase Connectivity,java数据库连接，实际上jdbc是java中的一套和数据库交互的api（application program interface 应用程序编程接口）
###为什么使用JDBC
![](01.png)
- 因为java程序员需要连接多种数据库(orcale,mysql,db2等)为了避免每一个数据库都学习一套新的api，sun公司提出了一个jdbc接口，各个数据库厂商根据此接口写实现类（驱动）,这样java程序员只需要掌握JDBC接口中的一套方法，就可以访问任何数据库。
###如何使用JDBC
1. 创建maven工程
2. 下载mysql相关jar包 

	登陆达内的私服：maven.tedu.cn

	登陆阿里私服：maven.aliyun.com

	- 首页搜索栏输入mysql 搜索
	- 找到5.1.6版本 复制坐标 到自己工程的pom.xml文件里
3. 创建JDBCDemo1.java类 添加main方法
4. 使用步骤：
	- 注册驱动
	- 获取连接对象
	- 创建sql执行对象
	- 执行sql语句
	- 关闭资源
	
		//1.注册驱动
		Class.forName("com.mysql.jdbc.Driver");
		//2.获取连接对象
		Connection conn = 
				DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/db3", 
						"root", "root");
		//3.创建sql执行对象
		Statement stat = conn.createStatement();
		//4.执行sql
		stat.execute("drop table if exists jdbct2");
		System.out.println("删除成功！");
		//5. 关闭资源
		stat.close();
		conn.close();

####执行sql的方法
- execute(sql) 可以执行任意sql，但是推荐执行DDL
	返回值为boolean值 true代表有结果集 false代表没有结果集，成功或失败通过是否有异常来判断
- executeUpdate(sql) 推荐执行DML
	返回值为int 代表生效行数
- executeQuery(sql)推荐执行DQL

	insert into jdbct1 values(2,'Jerry'),(3,'李白');
	
	返回值ResultSet 里面装了查询结果
	next()方法的作用：判断有没有下一条数据有返回值为true（同时游标往下移动） 没有则false

			//4.执行sql
				ResultSet rs = 
						stat.executeQuery("select * from jdbct1");
					//遍历结果
					while(rs.next()){
						int id = rs.getInt("id");
						String name = rs.getString("name");
						System.out.println(id+":"+name);
					}

###数据库类型和Java类型对比
		mysql             java
		int              getInt
		varchar          getString
		float/double     getFloat/getDouble
		datetime/timestamp   getDate
###ResultSet获取数据的方式
1. 通过字段名获取  如：getString("name")
2. 通过查询到结果数据的位置获取 如：getString(2); 位置从1开始

###读取配置文件


//创建读取配置文件的对象
				Properties prop = new Properties();
				//获取文件输入流
				InputStream ips = 
						DBUtils.class.getClassLoader()
						.getResourceAsStream("jdbc.properties");
				//把文件加载到对象中
				try {
					prop.load(ips);
					//读取连接数据库的信息
					driver = prop.getProperty("driver");
					url = prop.getProperty("url");
					username = prop.getProperty("username");
					password = prop.getProperty("password");
				} catch (IOException e) {
					e.printStackTrace();
				}

###数据库连接池
- DBCP DataBase Connection Pool:数据库连接池
- 为什么使用：如果没有连接池，每一次业务都需要和数据库服务器建立一次连接，业务处理完断开连接，如果有上万次业务就会有上万次的开关连接，频繁开关连接非常浪费资源，使用数据库连接池，可以设置几个初始连接，如果有业务需要使用连接，则从连接池中直接获取，如果连接池中连接用光，则会等待连接归还后再获取连接

- 如何使用：
1. 下载jar包： 从maven私服中搜索 dbcp

2. 代码：

		dataSource
			.setDriverClassName("com.mysql.jdbc.Driver");
		dataSource.setUrl("jdbc:mysql://localhost:3306/db3");
		dataSource.setUsername("root");
		dataSource.setPassword("root");
		//3. 设置连接池策略信息
		dataSource.setInitialSize(3);//初始连接数量
		dataSource.setMaxActive(5);//最大连接数量
		
		//4.从连接池中获取连接对象
		Connection conn = dataSource.getConnection();
		System.out.println(conn);


###解决jdbc乱码问题
在url后面添加如下内容
jdbc:mysql://localhost:3306/db3?useUnicode=true&characterEncoding=UTF-8
35

---------------------------------------------------------------------------------------------------------------------------------------------------第八天--------------------------------------------------------------------------------------------------------------------------------------------------------------
##回顾

create database jdbc2;
use jdbc2;
create table user(id int primary key auto_increment,name varchar(10),age int);

###PreparedStatement
- 预编译的Sql执行对象
- 好处：
1. 代码可读性更高，不容易出错（因为statement拼接字符串又麻烦又易出错）
2. 带有预编译效果，执行效率比statement略高
3. 可以避免sql注入
- sql中有变量就用preparedStatement 没有变量就用statement
- 使用方式：（参见代码：TestStatement.java）

			//创建预编译sql执行对象
			String sql = 
					"insert into user values(null,?,?)";
			stat = conn.prepareStatement(sql);
			//把？替换成真正的值	
			stat.setString(1, name);
			stat.setInt(2, age);
			//执行sql
			stat.executeUpdate();

###通过登陆案例演示sql注入
create table t_login (id int primary key auto_increment,username varchar(10),password varchar(10));
insert into t_login values(null,'libai','admin'),(null,'lisi','admin');


