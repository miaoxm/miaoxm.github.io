前端课程介绍
一、HTML
	- 用来勾勒出网页的结构和内容（骨架）
二、CSS
	- 样式，美化页面
三、JavaScript
	- 让页面呈现出动态的效果和动态的数据
四、JQuery
	- 用来简化JavaScript
---------------------------------------------------------------------------------------------------------------------------------第一天----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HTML
Hyper Text Markup Language:超文本标记语言，html是一门网页制作语言。html相当于是标签和属性固定的xml。
- 什么是超文本：不仅仅包含纯文本，还包括文本的字体、样式、颜色等，还包括多媒体信息（图片，音频，视频）
- html的学习内容：
	1、学习都有哪些固定的标签
	2、学习标签内部有哪些固定的属性
	3、学习标签和标签之间的嵌套关系
1、创建一个html文件
	HTML页面的基本结构：
		1)文档声明  <!DOCTYPE html>，告诉浏览器用html哪个版本的标准去解析页面
		2)html 除了声明所有内容都在html里面
		3)html里面包括两个根标签  head和body
		4)head里面的内容用户是看不到的，是告诉浏览器解析当前页面时候的注意事项。
		5)body用户看到的所有内容都在body里面
		<!DOCTYPE html>：按照html5的标准去解析页面
		<html>
			<head>
				//给浏览器看的内容写在这里
			</head>
			<body>
				//给用户看的内容写这里
			</body>
		</html>
2、Head里面的内容
	1)meta：页面元数据标签，指页面的一些基础信息
		<meta charset="UTF-8">：指定字符集，文件保存时使用的字符集和浏览器解析数据时用的字符集
		<meta name="keywords" content="java培训，ios培训，ui培训">设定页面的关键字，合理使用此内容能够让更多的用户访问的到（提高搜索引擎爬虫找到此页面的概率）
	2)title：标签标题，设置网站的标题，和关键字有相同的作用，有利于SEO优化（搜索引擎优化）。
	- body 体标签 展示给用户的信息写在此标签内
3、body内部的常用标签
	1)内容标题：<h1></h1>......<h6></h6>
 	- 常用属性：align="center"用来控制标签内容的对齐方式
	2）段落标签：<p></p>此标签的上面和下面会有空行
	3）列表标签
		- 无序列表 ul unordered-list,li  list-item 
		格式：
		<ul>
			<li></li>
			<li></li>
			<li></li>
		</ul>	
		常见属性：type 用来控制每一项前面的内容（实心圆，空心圆，方块）
		- 有序列表
		格式：
		<ol>
			<li>打开冰箱</li>
			<li>把大象装进冰箱</li>
			<li>关上冰箱门</li>
		</ol>
		常见属性：type，start，reversed（反转）
		- 列表的嵌套
	4）分区标签 div和span
	- 页面中可以划分多个显示区域，被划分的区域可以进行复用，或对区域内部的所有内容进行统一管理。
	- 分区元素（标签）本身没有显示效果。可以理解成是一个容器
	4.1）div：块级分区，一个div独占一行
	4.2）span：行内分区，可以和多个元素共占一行
	- 通常一个页面中会分为三大分区
		<body>
			<div>头部区域</div>
			<div>体部区域</div>
			<div>尾部区域</div>
		</body>
	- Html5标准中新增了几个分区标签：
	* header
	* article(正文，文章的意思)
	* footer
	* nav
		<body>
			<header>头部区域</header>
			<nav>导航区域</nav>
			<article>正文区域</article>
			<footer>尾部区域</footer>
		</body>
	5)换行标签 <br>
4、元素（标签）分类
	1）块级元素：独占一行
	- 例如：
		div，p，h1-6，hr（分割线）
	2）行内元素：可以和其它元素共用一行的元素
	- 例如：
		span，<i></i>和<em></em>(斜体),
		<b></b>和<strong></strong>加粗
		<u></u>下划线
		<del></del>和<s></s>删除线
5、行内元素空格折叠现象
	- 在一行内如果连续多个空格，只会显示一个，如果有需求显示多个空格，需要把空格替换成 &nbsp(牛逼视频);
	1)常见特殊字符：
		- 空格：&nbsp;
		- <：&lt;
		- >:&gt;
		- 换行：<br>  牛逼视频，老铁，干它
	2）图片标签，单标签
	- 格式：<img src="路径">
	- 路径分为绝对路径和相对路径
	- 绝对路径：包括磁盘路径和网络路径
		磁盘路径：C：/imgs/a.jpg  出于安全考虑，通常web服务软件不允许访问工程之外的资源。
		网址路径：http：//www.abc.com/a.jpg
	- 相对路径：相对于当前页面文件的位置，同级直接写图片名，存在子目录a中则相对路径为：a/b.png，
		     如果存在上级目录中：../c.png,如果存在上两级目录中：../../c.png。
	- 路径总结：工作中本网站的图片资源一般都是用相对路径，如果访问网站外部资源则使用绝对路径
	- 图床：行业内称专门提供网页图片的网站称为图床
		- 好处：不需要占用自己服务器资源
		- 坏处：图床网站路径改变后，图片就看不到了
	- 常见属性：
		src：路径
		alt：当图片不能正常显示的时候，显示此属性的值
		title：图片的描述信息,鼠标悬停内容
		width/height：宽高属性，值为 像素（px）或百分比
	- 支持的图片格式
		jpg：不支持透明色
		png：支持透明色
		gif：动图
注释的快捷键：ctrl+shift+/
---------------------------------------------------------------------------------------------------------------------------------第二天----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1、图像地图 map
- 什么是图像地图：可以将图片中的某个部分作为可点击的链接。
- 使用方式：
	<img alt="图片" src="logo.png" width="400px" usemap="#mymap">
	<map name="mymap" id="mymap">
		<area alt="圆形" shape="circle" coords="100,100,50" href="resume1.html">
		<area alt="矩形" shape="rect" coords="0,0,50,50" href="http://doc.tedu.cn">
	</map>
- 如果使用shape=rect，coords的值所代表的意思是左上角点的x和y，还有右下角点的坐标x和y。如果shape=circle，coords值表示圆心坐标（x和y），和半径
- href属性：值为一个路径，相对路径和绝对路径，区域被点击时会直接访问此路径的内容，路径可以指向页面，也可以指向图片资源。也可以指向其他类型的文件，会下载此文件。
2、超链接 a
- 在网页中经常使用超链接进行链接导航，语法：
	<a href="路径">链接</a>
- target属性：控制从什么位置跳转，值为_self是从当前页面跳转（默认），值为_blank是跳转到一个新窗口显示页面。
- a标签可以支持以下几种写法
	href，可以跳转到站外资源，站内资源，下载文件，浏览图片
3、a 标签锚点的使用
- 通过锚点可以实现页面内部位置的跳转
- 操作方式：
	1）在页面中的某个位置设置锚点：<a name="top" id="top"></a>
	2)通过超链接跳转到锚点的位置：<a href="#top">回到顶部</a>

4、表格标签
- 什么是表格：由一些单元格的矩形框按照从左到右从上到下的顺序排列组成的内容为表格
	- 作用：以一定的结构来显示信息 tr:table-row;th:table-header;td:table-data
	- 表格的格式：
		<table>
			<tr>
				<td></td>
				<td></td>
			</tr>
		</table>
	- 表格属性：
	1）cellspacing:单元格之间的间距和单元格距离表格边框的距离
	2）cellpadding:内容与单元格边框之间的距离
	3）width/height:定义表格的宽和高，可以用像素，也可以用百分比
	4）border:边框的高度
	5)colspan:column(列) span 合并列
	6)rowspan:row(行) span 合并行
		-课程表练习，参见table5.html
	- 行分组：在前端编程的时候，使用行分组便于整体操作表格的头部、体部和尾部
		格式：
		<table>
			<thead></thead>
				<th></th> table-head
			<tbody></tbody>
			<tfoot></tfoot>
		</table>
	- caption标签，写在table标签内部，起到表格标题的作用
		<table border="1">
		<caption>订单信息</caption>
		</table>
5、表单 （form）：在浏览器中，浏览器向服务器发送数据，一般时用的都是表单
	- 表单内部的控件有：文本框，密码框，单选框，多选框，下拉列表，文件选择，时间选择，提交按钮
	- 文本框：用于获取用户输入的单行数据 textbox
	格式：
	<form action="提交地址">
		用户名：<input type="text">
	</form>
	属性：name，value：默认值，maxlength：最大长度，readonly：只读
	- 密码框 passwordbox
	格式：
	<form action="提交地址">
		密码：<input type="password">
	</form>		
	- 单选框  在easyUI中为radiobutton
	利用js创建一个radiobutton
	$('#rb').radiobutton({
		label:'Apple',//设置显示的值
		value:'Apple',//设置值
		checked:true//设置选中
	});
	格式：
		性别：<input type="radio">男<input type="radio">女
	属性：name：多个单选控件的name值要一致，value：提交数据时会把value的值提交到服务器，checked：设置选中
	- 复选框（多选） 在easyUI中为checkbox
	利用js创建一个checkbox
	$('#ck').checkbox({
		label:'Apple',//设置显示的值
		value:'Apple',//设置值
		checked:true//设置选中
	});
	格式：
		爱好：<input type="checkbox" name="hobby" value="dy">电影
			<input type="checkbox" name="hobby" value="cg">唱歌
			<input type="checkbox" name="hobby" value="lq">篮球
	- 标签 label
	格式：<label for="nan">男</label>
	- 文件选择 选择上传的文件 filebox
	格式：靓照：<input type="file" name="pic">
	- 日期选择 datebox、datetimebox
	格式：生日：<input type="date" name="birthday">
	- 隐藏域：用户看不到，但是又需要向服务器提交
	格式：<input type="hidden" name="id" value="1">
	作用：此控件用户看不到，有些场景需要提交一部分用户不需要看到的数据，比如修改数据时的id
	- 文本域 textarea 输入多行数据时使用
	格式：
		个人介绍：<textarea rows="3" cols="30" name="introduce">你就是很懒！</textarea>
	- 下拉选
	格式：
		<select name="city">
			<option>选择城市：</option>
			<option value="bj">北京</option>
			<option value="sh">上海</option>
			<option value="gz">广州</option>
		</select>
	- 按钮
	1）提交按钮：<input type="submit" value="注册">
	2）重置按钮：<input type="reset" value="重置">
	3）普通按钮：<input type="button" value="按钮">
作业：把form和table写一个注册页面
---------------------------------------------------------------------------------------------------------------------------------第三天----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
第三天	CSS
1、什么是CSS	
   Cascading层叠 Style样式 Sheet表，层叠样式表，CSS技术用来美化html页面，html相当于盖房子，css相当于装修，使用CSS可以把样式代码和html分离
2、html页面中引入css的方式
	1）内联样式：在标签的style属性中引入css，不推荐使用，不能复用
		<div style="color: red;border: 1px solid blue;">我是一个div</div>
	2）内部样式：通过style标签引入css，可以在当前页面复用，学习时经常使用，工作中不推荐使用，因为不能多页面复用
		<style type="text/css">
			h2{
				color:blue;
				background-color: pink; 
			}
		</style>
	3）外部样式（引入）：通过link标签引入外部css样式文件，可多页面复用，推荐工作中使用,需要单独创建样式文件
		<!-- 引入外部css文件 relation -->
		<link rel="stylesheet" href="first.css">
	4）验证优先级
		内联优先级最高
		内部和外部同时存在，则就近原则，后执行的生效         
		标签默认效果优先级最低

- 标签（元素）：html或xml中存在于一对尖括号+内容，称为标签，标签分为：单标签（<a>）双标签（<a></a>）自闭标签（<a/>）
- 属性：存在于标签内部的键值对
- 子标签：标签内部的标签
- 标签内容：标签内部的文本

3、选择器 可以帮助我们选中需要添加样式的标签
	1）标签名选择器:通过标签的名称找到指定的标签
	格式：	元素名{		}
	2）类选择器：通过标签的class属性值选中指定标签,多个标签可以有相同的class值
	格式：<div class="d1">div1</div>
		.d1{		}
	3）id选择器
		通过id找到标签，一个html文件中id不能重复
		- 格式：#id{	}
	4)派生选择器（后代选择器）
		类似于路径，找到符合要求的标签，会匹配所有的后代标签
		- 格式：ul li a{		}
	5)子元素选择器
		和后代类似，但是只能获得子元素
		- 格式：ul>li>a{		}
	6)分组选择器
		可以将多种选择器结合到一起使用，用来统一设定样式
		- 格式：h1,h2,#abc,.m{		}
	7)伪元素选择器
		伪元素选择器选择的是元素的状态
		- 状态分为以下几种：
		link 表示元素未被点击时的状态
		hover表示鼠标悬停时的状态
		active 表示元素被点击时的状态
		visited 表示被点击后的状态
		格式：#id:hover{		}
4、CSS常用属性
	1）布局相关
		- 设置宽高 width和height 赋值像素或百分比,80pxp,宽度可以通过百分进行设置，高度不生效
	2）设置位置
		- 外边距：指当前元素距父元素或相邻元素的距离
		- 格式：margin-top(left,right,bottom)
			margin: 10px 四个外边距值都为10px
			margin: 10px 20px 上下10px  左右20px
			margin: 0px auto   居中
			margin: 10px 20px 30px 40px 上右下左 顺时针顺序
		- 内边距：指元素内容距元素边框的距离，**改变内边距的值元素的的宽高会随着改变**
			  浏览器会默认给一些元素添加内边距或外边距，所以工作的时候会使用以下代码，把默认内边距清零，从而达到不同浏览器效果统一的目的
				*{
					padding:0;
					margin:0;				
				}
		- 格式：padding与margin类似
		- 边框：可以为元素上下左右四个方向设置不同夫人边框效果。
		- 格式：border:1px solid red;
	3)盒子模型
		css渲染页面的时候，使用了一种规则，就是盒子模型，盒子模型包括了12个数值，分别是：外边距的上下左右，内边距的上下左右，边框的上下左右
		一个元素在页面中所占宽度的公式：
		左外边距+左边框的宽度+左内边距+内容宽度+右内边距+右边框的宽度+右外边距
	4）盒子模型显示元素的注意事项（**********重要************）
	- 块级元素：默认占一行，宽度默认100%，高度默认为内容的高度；上下相邻的两个块级元素上下外边距会有坍塌效果，会取两个外边距中的值的最大值，
	- 行内元素：默认多个行内元素占一行；不可以设置宽高，宽高为内容的宽高，且宽高不可以修改；给行内元素设置左右外边距/边框/内边距都会生效，上下的不生效或显示异常。
---------------------------------------------------------------------------------------------------------------------------------第四天----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
第四天
1、颜色赋值
	赋值方式：
		/* 1、通过颜色名称赋值 */
		/* background-color: red; */
		/* 2、通过6位的16进制赋值 */
		/* 每两个值表示一个颜色 红绿蓝（RGB） */
		/* background-color: #ff00ff; */
		/* 3.3位的16进制写法 */
		/* background-color: #0f0; */
		/* 4.通过rgb  10进制赋值 */
		/* background-color: rgb(255,0,0) */
		/* 5.通过rgb  10进制赋值 带透明值 a=alpha(0-1) */
		background-color: rgba(0,0,255,1)
2、背景图片
- 给图片设置背景图片，图片不会占用内容的位置
	background-color: yellow;
	background-image: url("a.jpg");
	background-size: 100px 100px;
	/* 只有一个，不会出现平铺（不会重复） */
	background-repeat: no-repeat;
	/* background-position: center; */
	/* 百分比控制位置  第一个值水平位置的  第二值垂直位置的*/
	/* background-position: 0% 0%; */
	/* 通过像素控制位置  距左面的像素   具右面的像素*/
	background-position: 10px 30px;
3、文本相关属性
	color:red;/* 文本颜色 */
	font-size: 30px;/* 文本大小 */
	text-align: center;/* 文本对齐 */
	/* 通过设置行高让文本上下居中 */
	line-height: 50px;文本的高度等于元素的高度
	/* 文本修饰 */
	text-decoration: underline;/* none值用来去除超链接的下划线 */
	font-family: "楷体"; /* 设置字体 */
	font-weight: bold;/* 字体粗细 */
	font-style: italic;/* 字体样式（斜体等） */
练习：学子商城首页练习 代码见：4home.html

圆角属性：border-radius:2px;	光标样式：cursor:pointer;

4、溢出属性 overflow
	1)visible 溢出部分可见
	2）hidden 溢出部分隐藏
	3）scroll 溢出部分滚动显示
5、display属性 该属性控制元素的显示方式
	1）block：块级元素的默认值
	2）inline：行内元素的默认值
	3)inline-block:一行可以显示多个，也可以修改宽高和上下的内外边距
- 登录按钮练习
	background-color: #27b0f6;
	width: 100px;
	height: 30px;
	display: inline-block;
	text-decoration: none;
	color: #ffffff;
	text-align: center;
	line-height: 30px;
	border-radius: 5px;
6、定位
	1）文档流定位：在不进行任何设置的时候，默认为文档流定位。元素的定位从上到下，从左到右的方式控制元素的位置
	2）浮动定位：通过float属性让元素脱离文档流定位，向当前所在行的左侧或右侧浮动，浮动到边框或碰到另外一个浮动元素时停止，由于浮动脱离文档流
		      浮动元素后面的其他元素会自动填充浮动元素原来的位置，可以使用clear属性实现元素不移动。
	- 练习：通过浮动把无序列表横向排列。
       清除无序、有序列表的序号：list-style-type:none;


学子商城左侧边栏效果实现  代码实现：
1homework.html
- 涉及新知识点
1）纵向对齐方式： top middle bottom baseline(默认) 
		如果需要单独修改元素位置，必须把默认的baseline修改掉  不然会联动 
		vertical-align: middle;
2）定义列表标签 dl dt dd
	- 格式：
		<dl>
			<dt>我的订单</dt>
			<dd>全部订单</dd>
			<dd>待收货</dd>
			<dt>我的优惠券</dt>
			<dd>全部优惠券</dd>
		</dl>
使用dl、dt重做侧边栏的菜单


	3)position定位
	- static：静态定位（默认），就是指文档流定位，不能使用top，left，right，bottom控制位置，通过外边距控制位置
	- absolute:绝对定位,也是通过top，left，right，bottom控制元素的位置，元素**会**脱离文档流，top，left，right，bottom相对于祖先元素中使用了position
		     （不能是static）定位元素,当需要往页面中添加一些元素，此元素需要覆盖某些内容，但是并不影响之前的页面布局，此时只能使用绝对定位。
	- relative：相对定位，也是通过top，left，right，bottom控制元素的位置，元素**不会**脱离文档流，top，left，right，bottom相对的是元素的初始位置
		       **
	- fixed：固定定位，固定在窗口的某个位置，不会因为内容的改动而该改变位置，
		   通过top，left，right，bottom四个属性控制位置（相对于整个窗口），通过z-index控制层级，值越大越靠上，默认为0。
		   **使用固定定位需要设置宽高，和通过top，left，right，bottom控制位置，否则可能出现显示bug**
定位总结：
- float：脱离文档流，需要把纵向改为横向排列时使用，float最多会有两层
- fixed：脱离文档流，需要固定在窗口中时使用
- relative：不脱离文档流，位置改变不会影响其他后面的元素
- absolute：脱离文档流，有弹出窗口时使用，不会影响页面布局
---------------------------------------------------------------------------------------------------------------------------------第五天----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CSS的三个特性
1、继承性：子元素可以使用父元素的部分属性
	- 只能继承color/font-开头/text-开头/line-开头	这些属性。继承不仅仅儿子元素可以继承，所有的后代元素都可以继承
	- a标签文字颜色和下划线是不能继承的，h1-6字体的大小不会继承
2、层叠型：通过不同的选择器可以指向同一个元素，如果作用的属性不同，则全部生效，如果相同，则依据优先级进行控制

3、优先级：
	- 是否直接选中，继承属于间接选中，此时直接选中的生效
	- 如果是相同选择器，后执行的生效
	- **不同选择器：id>类>标签名>继承>默认效果**

常见错误
1、把多个元素显示到一行
	- 通过float浮动定位后的元素  不受纵向对齐方式的影响，可以随意调整外边距。
	- 行内或行内块元素，受纵向对齐方式影响，不可以随意调整上下外边距。
	- 通过相对定位改变元素的位置最简单快捷。
	- 如果元素内部的所有子元素全部浮动，则元素的高度为零，通过overflow=hidden属性，就算子元素浮动了也能识别出内容的高度。
	 **元素所有子元素浮动后高度为0**
--------------------------------------------------------------------------------------------------------------------------------------------第六天------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#回顾：
##html
1. h1-h6 ，p 
2. 列表标签 ul li  ol li, dl dt dd
3. 分区标签： div块级元素：独占一行   span行内元素，多个行内元素共占一行 
4. 分类
- 行内：span i和em b和strong u del和s
- 块级元素：div p h1-6 hr
5. 图片 img 属性 alt src title usemap
6. 图片地图 map shape形状 coords 坐标 href路径（页面资源，图片资源，文件资源）
7. 超链接 a  href同上  ， 不写href属性只是个文本，锚点实现本页面内的跳转 
8. 表格 table tr td th theader tbody tfoot  属性：border， 跨行rowspan，跨列colspan, 内容和单元格的距离：cellpadding，单元格和单元格之间的距离:cellspacing
9. form表单
<input type="?" 
文本框 text
密码框 password
单选 radio
多选 checkbox
文件 file
日期 date
隐藏域 hidden
提交按钮 submit
重置 reset
按钮 button

文本域 textarea
下拉选 select  option

##CSS
1. 引入的三种方式
- 内联：写在标签 style属性内 不可复用
- 内部：写在head里面的style标签内部 可以在本页面复用
- 外部：引入写在head里面的link标签里面，样式代码写在单独的*.css文件中
优先级：内联最高 默认最低
2. 选择器
- 标签名选择器 div{}
- 类选择器 .class{}
- id选择器 #id{}
- 派生选择器 div span {}
- 子元素选择器 div>span{}
- 分组选择器 div,.class,#id{}
- 伪元素选择器 a:hover/active/visited/link/
3. 盒子模型
盒子模型包括：
-外边距
-边框
-内边距
-宽高
元素所占的宽度：左外边距+左边框+左内边距+内容宽度+右内边距+右边框+右外边距
行内元素：宽高为内容的宽高不能修改，上下的内外边距和边框不生效或异常
块级元素：盒子模型的所有数值都可以修改并都生效
4. 颜色的设置方式5种
- 颜色名称，十六进制两种 三位和六位，通过十进制 rgb() rgba()
- 背景图片： 
	background-image:url();
	background-color:;
	background-size: 宽和高；
	background-repeat:no-repeat;
	background-position:单词，百分比和像素
- 圆角： border-radius:像素；
- 光标样式：cursor:pointer;
- 文本和字体相关： 
- 文本颜色color 大小font-size 粗细 font-weight, font-style,字体名称 font-family, text-align对齐方式，text-decoration，行高 line-height
- 溢出 overflow：hidden/visible/scroll
- display： block块级元素的默认值 inline行内元素的默认值 inline-block
- 定位：
1. 文档流定位 默认 
2. 浮动定位： 本行之内左右浮动，浮动后脱离文档流，后面的元素会顶上来可以通过设置clear不顶上去（）
3. position：
- static：默认 文档流
- relative：相对定位 不脱离文档流，上下左右相对于初始位置
- absolute：绝对定位 脱离文档流，上下左右相对祖先元素中做了定位（非static）的元素
- fixed： 固定定位，脱离文档流，上下左右相对于整个窗口

###CSS的三个特性
包括：继承性，层叠性，优先级
- 继承性：子元素可以使用父元素的部分属性
1. 只能继承color/font-开头/text-开头/line-开头这些属性
2. 继承不仅仅儿子元素可以继承，所有的后代元素都可以继承
3. a标签文字颜色和下划线是不能继承的，h1-6 字体的大小不会继承
- 层叠性：通过不同的选择器可以多次指向同一个元素，如果作用的属性不同，则全部生效，如相同则依据优先级进行控制。
- 优先级：
1. 是否直接选中？继承属于间接选中，此时直接选中的生效
2. 如果是相同选择器，后执行的生效。
3. 不同选择器：
		id>类>标签名>继承>默认效果

###常见错误
1. 把多个元素显示到一行 需要微调位置的时候
- 通过float浮动定位后的元素 不受纵向对齐方式的影响，可以随意调整外边距
- 行内或行内块元素，受纵向对齐方式影响，不可以随意调整上下外边距
- 通过相对定位改变元素的位置最简单快捷

2. 如果元素内部的所有子元素全部浮动，则元素的高度为0，通过overflow=hidden属性，就算子元素浮动了也能识别出内容的高度。 **元素所有子元素浮动后高度为0**
---------------------------------------------------------------------------------------------------------------------------------第七天----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

##定位
1. 文档流定位 position：static
2. 浮动定位，浮动到本行的左边或右边，脱离文档流，应用场景： 纵向排列变成横向排列并且没有重叠的情况使用浮动定位
3. position定位：
- fixed：固定定位 位置相对于浏览器窗口，不会随着内容改变而改变
- relative:相对定位，位置相对于元素的初始位置，当元素需要在初始位置做位置偏移的时候使用，不脱离文档流。
- absolute：绝对定位，位置相对于祖先元素中做了position定位(非static),当需要往页面中添加一些元素，此元素需要覆盖某些内容，但是并不影响之前的页面布局，此时只能使用绝对定位。

#JavaScript
###html属于搭建页面结构 css美化页面 js给页面添加行为
###js历史
	1995年发布 网景公司 LiveScript 同年更名为JavaScript，和java没啥关系 就是蹭热度的
###js特点
- JavaScript属于脚本语言，不需要编译，由浏览器解析执行
- JavaScript可以插入到Html页面中 由浏览器执行
- JavaScript基于面向对象，弱类型语言
###js优点
1. 交互性：可直接和用户进行交互
2. 安全性：只能在浏览器内运行，不允许访问本地硬盘中的其它资源
###如何在html中添加js
1. 在元素中的事件中添加
	<input type="button" onclick="run()">
2. 在head标签中添加 script标签 在标签内部写js代码，可以写在html中的其它位置，但是不推荐
		
		<script type="text/javascript">
			alert("第二种方式引入js");
		</script>
3. 创建*.js文件，在文件中写js代码，通过script标签中的src引入，如果使用了src属性 则不能在标签内部写js代码
		
		<script type="text/javascript" src="first.js"></script>

##JavaScript语法
###数据类型
1. 数值类型(number)
2. 字符串类型（string）
3. 布尔值类型 (boolean)
4. undefine
5. null
6. 对象类型
###变量的声明
- 因为js属于弱类型的语言，所以声明变量的时候不需要指定变量的类型，直接赋值即可
		
		var x = 18;
		x = "abc";
		var y = "abc";
		var z = true;
###数值类型
- 在js中所有数值的底层都是浮点型，在使用的过程中会自动转换类型(类型的隐式转换)
	 	 var x = 10/2;  5
		  var x = 5/2;  2.5
- NaN :Not a Number 不是一个数，  NaN不和任何一个数值相等，包括它自己，如果需要判断某个变量是否为NaN使用isNaN(x)

###字符串类型

	通过单引号或双引号修饰一个字符串，例如：
	var s1 = 'aaa';  var s2 = "bbb";

###布尔类型
	值为true和false
###undefined 未定义
- 此类型只有一个值，值为undefined，变量声明但是没有定义的话，类型和值同为undefined
###null
- 此类型也只有一个值 值为null，通常应用在方法的返回值位置.

###数据类型的转换
- 在js中数据类型会自动根据需要进行类型的转换（隐式转换）
1. 数值类型
- 转字符串：直接转 18->"18"
- 转布尔值: 0和NaN转false，其它所有数值true
2. 字符串类型
- 转数字： 如果字符串为数字 则直接转 "18"->18,空字符串("")转为0，非数字字符串转成NaN.
- 转布尔值：空字符串转false，其它转true.
3. 布尔值类型
- 转数字： TRUE->1  false->0
- 转字符串："true"  "false"
4. undefined类型
- 转数字： NaN
- 转布尔值： false
- 字符串： "undefined"
5. null类型
- 转数字： 0
- 转布尔值： false
- 字符串： "null"
![](01.png)
##练习：
1. 在页面中弹出 "66"+6的值和 "66"-6的值
	alert("66"+6);
	alert("66"-6);
2. 判断如果内容为字符串 输出 字符串有内容 如果内容为空字符串"" 输出字符串内容为空
	if("a"){
		alert("字符串有内容");	
	}else{
		alert("字符串内容为空");
	}
3. 布尔值类型转换 已知 var arr=[3>2>1,1<2<3];
	arr[0] false 和 arr[1] true ;

###运算符
- JavaScript中的运算符和Java中大体相同
####不同之处：1. ==和===
	比较运算符==,JavaScript中还提供了===，
1. == 在比较之前会先将两端的变量统一成一种类型再进行比较。
2. ===判断是否严格相等，如果类型不相等就不相等 

- 测试： "666" 和 666 通过== 和 ===进行判断
	
		alert("666"==666); //true
		alert("666"===666); //false

####不同之处：2. typeof 
- typeof：获取某个变量的类型
- 测试：  typeof 66 + 6; //"number6"
####3. delete
- delete： 用于删除数组中的内容
- 测试: 
		
		var arr = [18,'小明',true];
		alert(arr);// 18,'小明',true
		delete arr[1];
		alert(arr);// 18,,true
		alert(arr[1]);// undefined
####4. 两数相除 会自动转换整数和小数 
		
		alert(10/2);
		alert(10/3);
###语句
包括：if else  while  do while  switch  for 
- 不同点：
1. if的条件 如果是其它类型会自动转成布尔类型
2. for循环中的 int i 改成 var i ，不支持增强for循环 
- 测试for循环在控制台输出 0-9；
	
	for(var i=0;i<10;i++){
		console.log(i);
	}

###函数

- 方法就是存在于对象中的函数
- 函数的两种声明方式
1. function 函数名(参数列表){
	return 返回值;
}
2. var 函数名 = function(参数列表){
	return 返回值;
}
	
- 通过按钮调用函数

	<input type="button" value="我是按钮" 
	onclick="btnrun()">

###和界面相关的一些函数
1. 获取页面中的元素（标签）
	var nameInput = document.getElementById("name");
2. 从文本框中获取用户输入的内容
	nameInput.value
3. 往元素中添加文本 和 添加html代码
		
- 标签中添加文本
		myDiv.innerText = "<h1>aaa</h1>";
- 标签中添加html代码
	
		myDiv.innerHTML = "<h1>aaa</h1>";
- =为赋值 +=为追加内容

###练习：求用户输入的数值的平方
1. 创建一个pf.html，在页面中添加一个文本框 一个按钮还有一个显示结果的div
2. 在html中添加js代码，声明一个名字叫做pf的函数
3. 在函数内部，先得到文本框标签，获取里面的value，然后判断value的值是否是数值 如果不是则alert出输入错误，如果是数值，获取显示结果的div，把获取到的数值相乘的结果放到div里面
4. 把按钮的点击事件和pf函数建立关系


###作业：
1. 实现一个非常low的计算器
2. 在页面中添加一个大的div里面通过for循环添加9个小的填充满，总共两个颜色 相邻的颜色不同

3. 扩展作业：通过多个div拼接出来一个三角形

---------------------------------------------------------------------------------------------------------------------------------------------------第八天-----------------------------------------------------------------------------------------------------------------------------------------------------------------


今天内容介绍：
String 数组 日期对象  正则 

课程回顾：
1. 优点：
交互性 页面和用户之间的交互 
安全性，只能访问浏览器内部数据不能访问浏览器以外的数据
2. 特点：
脚本语言，不需要编译，浏览器解析执行
可以插入到html当中
基于面向对象，弱类型的语言
3.在html中如何引入js
	- 在元素的事件中添加
		<input type="button" onclick="alert('hello')">
	- 在html文件的<script>标签中写js 位置可以随意，但是建议head标签内部
	- 创建单独的js文件 通过<script>标签的src属性引入文件
4.数据类型 
	number string boolean     undefined null
5.类型间的转换
	number 转string 直接转   转boolean 0和NaN转false其它true
	string 转number 能转直接转不能则NaN，转boolean ""转false 其它true
	boolean 转string “true”“false” 转number true=1 false=0
	undefined 转string “undefined” 转number NaN 转boolean false
	null 转string “null” 转number 0 转boolean false
6. 运算符 和Java中的运算符基本一致
	==和===
	type of 获取变量的类型   type of 8 + 7   number7
	delete  用于删除数组中的内容长度不变   delete arr[1];
7. 语句 和Java中的语句基本一致
	if 中条件内容 会自动转成boolean值 
	for中 int i改成 var i  不支持增强for循环

8. 函数两种声明方式
		1. function 函数名(name,age){
				return 返回值;
			}
		2. var 函数名 = function(name,age){
				return 返回值;
			}
		可以在元素的事件中去调用函数
9. 和页面元素相关：
	- 通过id获取页面中的元素
		var x = document.getElementById("id");
	- 获取文本框中的输入内容
		myInput.value
	- 往元素中写入内容（文本和html代码）
		myDiv.innerText="abc";
		myDiv.innerHTML="<h1>abc</h1>";


Day08内容：
1. 强制把字符串类型转成number
		- parseFloat(str)//如果字符串是正数也会得到整数
		- Number(str) //等效上面代码
		- parseInt(str) //不仅可以把字符串转成整数，也可以把小数转成整数
2. 常用API
2.1 String相关的api

- 创建字符串的两种方式  var str = "aa", var str = new String("bb");

- 转大小写  str.toUpperCase()  str.toLowerCase();

- 获取字符串出现的位置 从前面找 str.indexOf("a") 
	找到最后出现的位置 str.lastIndexOf("a") 
- 截取字符串 str.substring(start,[end]) end可以省略 结果不包含end的值
将从start位置开始到end(结果不包含end的值)的字符串截取出来。

- 替换字符串 str.replace(old,new);

- 拆分字符串 str.split(",") 通过,分割字符串

2.2Number相关函数
- 四舍五入，保留几位小数 toFixed(2)
2.3数组相关函数

	//1. 创建数组的两种方式 数组中可以添加任意类型
		var arr1 = ["小明",18,true];
		//创建一个空的数组
		var arr2 = new Array();
	//2. 数组中添加数据
		arr2.push("小花");
		arr2.push(25);
		//alert(arr1);
		//alert(arr2);
	//3. 数组的长度可变
		//arr1.length=1;
		//alert(arr1);
	//4. 从数组中取数据
		/* for(var i=0;i<arr2.length;i++){
			alert(arr2[i]);
		} */
	//5. 数组反转 指顺序反转
		/* var arr3 = [1,2,3];
		arr3.reverse();
		alert(arr3); */
	//6. 数组排序
		var arr4 = [1,12,2,5,23,4];
		//sort默认排序规则：
		//按照每一个元素的unicode编码进行排序，
		//比完第一个比第二个，相当于是以字符串的进行排序的
		/* arr4.sort();
		alert(arr4); */
		
		//自定义排序规则 
		//如果升序 return a-b,如果降序就是b-a
		//年龄升序 a.age-b.age
		//工资降序 b.sal-a.sal
		/* function sortFunc(a,b){
			//return a-b;//升序
			return b-a;//降序
		} */
		//使用自定义规则进行排序
	//	alert(arr4.sort(sortFunc));
		//使用匿名排序函数 进行排序
		arr4.sort(function(a,b){
			return a-b;
		});
		alert(arr4);


练习：新闻列表练习步骤
1. 搭建界面，给按钮添加onclick=“add()”;
2. 在script标签中声明add()函数
3. 在函数中先获取用户输入的内容，
然后通过“，”分割得到数组
4. 得到页面中的ul标签 
5. for循环遍历刚才的数组
6. 在ul标签中添加li的html代码,并且把遍历出来的
内容放在li里面

2.4 日期相关函数
- 服务器时间和客户端时间：服务器时间更常用，
	因为客户端时间可以任意修改。
	//1. 获取客户端时间 很少使用
		/* var d1 = new Date();
		alert(d1); */
	//2. 创建时间对象 指定时间 这个指定的时间通常是来自
	//服务器
		var d2 = new Date("2018/06/01 08:08:08");
		//alert(d2);
	//3. 获取和设置时间戳（距1970年1月1日的毫秒数）
		//alert(d2.getTime());
		d2.setTime(1000);
		alert(d2);
	//4. 获取单独的年月日时分秒 月份从0 开始
		console.log(d2.getFullYear());
		console.log(d2.getMonth());//月份需要+1
		console.log(d2.getDay());//星期几
		console.log(d2.getDate());//月的第几天
		console.log(d2.getHours());
		console.log(d2.getMinutes());
		console.log(d2.getSeconds());
		
	//5. 从完整日期+时间中 获取年月日 获取时分秒
		
		alert(d2.toLocaleTimeString());
		alert(d2.toLocaleDateString());

3. 正则
	. 匹配任意字符除了换行
	\w 匹配任意字母，数字，下划线
	\s  匹配任意空白
	\d 匹配任意数字
	^ 开始
	$ 结束

	//正则应用场景：1. 查找内容  2.校验文本
	//1. 创建正则的两种方式
		//直接创建  第一个/代表正则 第二个/代表模式
		//模式： g 全局查找 , i 忽略大小写
		 /* var reg1 = /^a/i; //a开头的 加i忽略大小写
			reg1 = /m$/; //m结尾
			reg1 = /\d{2}/; //包含任意两个数字
 			reg1 = /^m\d{3,5}c$/; //m开头c结尾中间有3-5个数字
 			//用户名或密码  字母，数字，下划线长度6-10
 			reg1 = /^\w{6,10}$/; 
		//通过对象创建 第一个参数是正则表达式，第二个 模式 
			var reg2 = new RegExp("^a","i");
 			//用户名或密码  字母，数字，下划线长度6-10
			reg2 = new RegExp("^\\w{6,10}$"); */
 			
 		//2. 和正则相关的函数
 			//2.1 正则对象的函数
 			var str = "You can you up no can no b b";
			//创建查找no的正则 添加g全局查找
			var reg = /no/g;
			//2.1.1得到查找到的内容 如果添加了g 是全局查找，
			//第一次找到第一个,第二次找到第二个，找不到后返回null
			//如果不加g 每次得到的都是第一个
				/* alert(reg.exec(str));
				alert(reg.exec(str));
				alert(reg.exec(str)); */
			//2.1.2 判断目标字符串是否符合规则 
			//var reg2 = /^you/i; //忽略大小写you开头
			//alert(reg2.test(str));
 			
 			
 			//2.2字符串和正则相关的函数
 			var str2 = "You can you up no can no b b";
 			var reg2 = /no/g;
			//1. 从字符串中找到匹配的内容 exec()函数所做的事儿
				//结果直接到一个数组中，比exec好用	
				alert(str2.match(reg2));
			//2. 查找并替换
				alert(str2.replace(reg2,"bu"));


---------------------------------------------------------------------------------------------------------------------------------------------------第九天-----------------------------------------------------------------------------------------------------------------------------------------------------------------

1. 课程回顾：

- String的api
	转大小写  toUpperCase()  toLowerCase();
	获取字符串出现的位置 indexOf(str)  lastIndexOf(str)
	截取字符串 substring(start,end) 不包含
	替换字符串  replace(old,new)
	拆分字符串 split(str)  返回数组
- 数组
	var arr = [18,true,"aaa"];
	var arr2 = new Array();
	添加内容 push("a");
	修改长度 arr.length=2;
	获取arr[0];
	反转arr.reverse(); 
	排序arr.sort(); unicode编码排序 
	arr.sort(function(a,b){
		return a-b;升序  b-a降序
	})
-日期：var d = new Date("时间字符串");
	getTime/setTime(0);
	getFullYear  getMonth getDate getDay getHours getMinutes getSeconds
	toLocaleTimeString()  toLocaleDateString();
-正则
	. 除换行 任意字符
	\w 任意字母数字下划线
	\s 任意空白
	\d 任意数字 
	^开始  $结尾

	^a\d{2,4}z$
	两种创建方式：
	var reg1 = /表达式/模式g(全局)i(忽略大小写)
	var reg2 = new RegExp("表达式","模式")，如果有\需要转译
	相关函数：
	1. 正则相关： 
		- exec 查找字符串 加g全局查找 查一次得到第一个 第二次得到第二个 直到得到null
		- test 校验字符串是否符合表达式的规则
	2. 字符串相关：
		- match 查找字符串 加g 返回的是数组
		- replace 查找字符串并替换

2. 事件的取消 
	- 如果在标签的事件中 执行 return false 则这次事件将被取消
	<a href="http://www.tmooc.cn" onclick="retrun confirm('确认离开吗？');">点击跳转</a>

	- onsubmit()：当表单提交的时候
	- onblur():当失去焦点的时候
	- onclick():当点击标签的时候

3. 表单提交校验问题：使用&&会出现短路，如果第一个false后面不执行
	这样就导致页面校验效果不完善，使用+则不会出现这样的问题

4.全局函数
	-不需要使用对象去调用的函数称为全局函数
	- parseInt()/parseFloat()
	- eval("alert('abc')") 作用：执行字符串中的js代码
	- isNaN()
	- alert()
	- confirm()
5. 自定义对象
	5.1 js中创建对象的两种方式
	5.1.1 第一种创建对象的方式
	
		//第一种创建对象的方式
	/* function Person(){} //定义了一个空对象
	//给对象添加属性和方法
	var p1 = new Person();
	p1.name = "小明明";
	p1.age = 3;
	p1.run = function(){
		alert(this.name+":"+this.age);
	}
	
	p1.run(); */
	//定义一个带属性和方法的对象
	/* function Person(name,age){
		this.name=name;
		this.age=age;
		this.run=function(){
			alert(this.name+":"+this.age);
		}
	}
	var p2 = new Person("刘备",38);
	p2.run(); */
	
	/* 第二种创建方式 */
	var p3 = {
			"name":"曹操",
			"age":18,
			"run":function(){
				alert(this.name+":"+this.age);
			}
	}
	/* 调用方法 */
		p3.run();

6.DHTML
	简介：Dynamic(动态) HTML， 这并不是一门新的技术，
	只是把html，css，js整合到一起形成的DHTML
	DHTML包括：BOM和DOM
	BOM：Browser（浏览器） Object(对象) Model（模型），
		BOM里面都是一些和浏览器相关的对象
	DOM: Document(文档) Object(对象) Model（模型）
		DOM里面都是和页面内容相关的对象

6.1 Window
	window里面的所有属性可以通过window.的形式得到，
	window下面的对象或函数也成为全局函数，全局对象，
	调用时window可以省略。
	目前接触的全局函数有：
	parseInt,parseFloat,isNaN,alert,eval,confirm
	全局对象有：
	document,history,location,navigator,screen
6.2 弹出框
	- alert() 弹出提示信息
	-confirm() 弹出 确认框
	- prompt() 弹出输入框
	
	alert(confirm(prompt("输入点儿什么")))

6.3 window的事件
	onclick: 当点击页面任意区域的时候会执行
	onload: 当页面加载完成的时候执行
	onfocus: 当页面获取焦点的时候执行
	onblur:当页面失去焦点的时候执行

7. location位置
	-href：表示当前的路径
	-reload():重写加载（刷新）
8. screen 屏幕
	-获取屏幕的宽高
		screen.width
		screen.height
	-获取屏幕的可用宽高
		screen.availWidth
		screen.availHeight
9. history 历史
	常用属性和函数
		history.length;//得到历史页面的个数
		history.back();//返回上一个浏览的页面
		history.forward();//前进
		history.go(num); num 0代表当前 正值前进 负值后退，
				数值表示前进后退次数
10.navigator 帮助、导航
	常用属性
		navigator.userAgent:获取浏览器版本信息

11. 通过js给元素添加css样式
	-先得到元素对象，通过.style的形式给元素添加css样式，
	这种方式添加的样式为内联样式（优先级最高）
12. 定时器
	- setInterval(参数1：函数，参数2：间隔时间单位毫秒) 
	返回值为定时器的id，如果需要停止定时器需要使用此id

13. 练习：假的轮播图

	-如何控制元素的显示和不显示
	-display:none; 脱离文档流隐藏
	-visibility: hidden; 不脱离文档流

---------------------------------------------------------------------------------------------------------------------------------------------------第十天-----------------------------------------------------------------------------------------------------------------------------------------------------------------
练习： 实现电子时钟功能   11:37:06 

1. DOM document object model 文档对象模型，
学习DOM 主要学习对html标签的增删改查操作
1.1 查询页面中的元素
- 通过id查询页面元素
- 通过元素名称查询
- 通过层级关系查询  上级parentElement 下级 childNodes 兄弟：元素.parentElement.childNodes
- 通过name属性值查询
	//1. 通过id查找元素
	 var p = document.getElementById("pid");
	 //2. 通过标签名称查找
	 var inputs = 
		 document.getElementsByTagName("input");
	 //3. 通过层级关系查找
	 //	3.1获取下级  元素.childNodes 获取当前元素内部所有的内容 
	 //包括文本内容和元素内容
	 	var nodes = p.childNodes;
	 //	3.2获取元素的上级元素 格式：元素.parentElement
	 	var div = p.parentElement;
	 // 3.3获取兄弟元素
	 	var nodes2 = p.parentElement.childNodes;
	 //4. 通过name属性获取元素
	 	var inputs = 
	 		document.getElementsByName("gender");
1.2 创建元素
		var li = document.createElement("li");
1.3 元素中添加子元素 需要先得到父元素 和创建新的元素
		父元素.appendChild(新元素)
	插入元素 需要先得到父元素和弟弟元素
		父元素.insertBefore(新元素,弟弟元素);
1.4 删除元素
		父元素.removeChild(被删除的元素);



练习： 页面中准备一个文本框 和按钮  
通过无序列表显示 北京 上海 广州   
点击按钮的时候在广州后面添加内容 


-------------------------------------------------------------------------------------------------------------------------------------------------第十一天-----------------------------------------------------------------------------------------------------------------------------------------------------------------

#JavaScript事件处理
- 什么是事件： 事件包括：状态改变事件，鼠标事件，键盘事件
- 鼠标事件： onclick(点击) onmouseover(移到元素上) onmouseout（离开元素）onmousedown(在元素上按下) onmouseup(在元素上松手) onmousemove(在元素上移动)   通过event对象可以获得鼠标触摸页面的坐标
- 键盘事件： onkeydown（键盘按下）  onkeyup （键盘松开）
- 状态改变事件：onchange(值发生改变的事件) onload(页面加载完事件) onblur(失去焦点) onfocus(得到焦点的事件) onsubmit(当表单提交的时候)

###事件的绑定
1. 在元素中添加事件 
	
		<input type="text" onkeydown="return keydownfn(event)"> 
2. 通过js代码动态绑定事件，好处：html代码和JS代码分离便于维护和升级
	
		var mybtn = 
			document.getElementById("mybtn");
		/* 绑定事件  */
		mybtn.onclick = function(){
			alert("按钮事件绑定成功！");
		}
###事件的取消
	通过返回值false取消事件
###Event对象
1. event对象中保存着和事件相关的信息
2. 通过event获取鼠标的坐标 event.clientX/Y
3. 通过event获取键盘的字符编码 event.keyCode 	event.which
4. 通过event获取事件源
	//获得事件的 事件源 也就是按钮   target:目标
		//alert(event.target.nodeName);
		//考虑浏览器兼容性问题 个别浏览器不支持target
		//alert(event.srcElement.nodeName);
		//以下写法有一种成功就可以 
		var obj = event.target||event.srcElement;
		alert(obj.nodeName);
###事件冒泡儿
- 如果同一区域有多个事件响应，响应的顺序是类似气泡，从下往上，也就是从底层元素往上级元素执行，这个过程称为事件冒泡
- 应用场景： 如果页面中有多个元素需要添加相同的事件，使用事件冒泡特性 可以直接在最外层大的元素上面添加一个事件，此事件可以应用在内部多个小的元素上，从而节省代码。
###做一个稍微高端一点儿的计算器
###分组
###订单结算

---------------------------------------------------------------------------------------------------------------------------------------------------第十二天--------------------------------------------------------------------------------------------------------------------------------------------------------------
#课程回顾
1. 事件
- 鼠标事件： onclick onmouseover onmouseout onmousedown onmouseup onmousemove
- 键盘事件: onkeydown  onkeyup
- 状态事件: onchange onload onblur onfocus onsubmit
2. 事件绑定 
- 在元素中 添加事件
- 通过js代码 动态绑定 （好处：html和js分离）
3. 事件取消  return false;
4. 事件event对象
- 得到鼠标的坐标 
- 得到键盘字符编码 
- 得到事件源 event.target||event.srcElement
5. 事件冒泡

##作业：添加表格

##元素属性赋值有两种方式 
1. html dom标准的赋值方式 
	 table.border = 10;
	div.innerHTML="<div>abc</div>";
2. w3c dom标准（和xml标准一致）
	table.setAttribute("border"，"10"); 
	var d = document.createElement("div");
	div.appendChild(d);

#jQuery 
###什么是jQuery
- 是一个js代码的框架
- 可以让程序员 写的更少 但做的更多
- 此框架本身就是使用js写的

###jQuery优势
1. 简化js代码
2. 可以像css一样获取元素
3. 可以直接修改页面样式（css）
4. 解决兼容性问题

###jQuery的引入
- 因为jQuery就是js代码 所以引入方式和普通js文件一样
###$介绍 
- $是 jQuery的简写  $("#div")=jQuery("#div")
###jQuery对象和js对象的转换
- js的对象只能调用js自己的函数,如果js对象需要调用jquery里面的函数需要把js对象转成jQuery对象
- 把js对象转成 jQuery对象
 	
		//通过js形式得到js对象
			var myinput = 
				document.getElementById("myinp");
			//把js对象转成jq对象
			var $jq = $(myinput);
			alert($jq.val());
- 把jQuery对象转成js对象
		
		//得到jq对象
			var $jq = $("#myinp");
			//alert($jq.val());
			//把jq对象转成js对象 
			//第一种
			var js1 = $jq[0];
			//第二种
			var js2 = $jq.get(0);
			alert(js1.value+"="+js2.value);

##jQuery选择器
###基本选择器
1. 标签名选择器
	$("div")  匹配文档中所有div
2. id选择器
	$("#id") 
3. 类选择器
	$(".类名")
4. 分组选择器
	$("div,#id,.class")
5. 所有元素选择器
	$("*")
###层级选择器
1. $("div span") 匹配div下所有的span元素
2. $("div>span") 匹配div下所有span的子元素
3. $("div+span") 匹配div后面紧邻的span兄弟元素
4. $("div~span") 匹配div后面所有的span兄弟元素

###层级函数
1. 获取元素的所有兄弟元素
				$("#two").siblings("div")
2. 获取元素的哥哥元素
				$("#two").prev("div")
3. 获取元素的哥哥们元素
				$("#two").prevAll("div")
4. 获取元素的弟弟元素
				$("#two").next("div")
5. 获取元素的弟弟们元素
				$("#two").nextAll("div")

###过滤选择器
1. $("div:first") 匹配所有div中的第一个元素
2. $("div:last") 匹配所有div中的最后一个元素
3. $("div:even") 匹配所有div中偶数div 从0开始
4. $("div:odd") 匹配所有div中奇数div 从0开始
5. $("div:eq(n)")匹配所有div中下标为n元素从0开始
6. $("div:lt(n)")匹配所有div中下标小于n元素0开始
7. $("div:gt(n)")匹配所有div中下标大于n元素0开始
8. $("div:not(.one)")匹配所有div中 class不为one的元素

###内容选择器
1. $("div:has(p)") 匹配所有包含p标签的div
2. $("div:empty") 匹配所有空的div
3. $("div:parent") 匹配所有 非空的div
4. $("div:contains('id')") 匹配文本内容包含id的div
###可见选择器
1. $("div:hidden") 匹配所有隐藏的div元素
2. $("div:visible") 匹配所有可见的div元素 

###jq中显示相关的函数
			//让隐藏的元素显示
			//$("div:hidden").show();
			//让显示的元素隐藏
			//$("div:visible").hide();
			//切换元素的显示状态
			//$("div").toggle();
###属性选择器
1. $("div[id]") 匹配有id属性的div元素
2. $("div[id='d1']")匹配id属性等于d1的div
3. $("div[id!='d1']")匹配id属性不等于d1的div

###子元素选择器
1. $("div:nth-child(n)") n从1开始，匹配div中第n个子元素
2. $("div:first-child") 匹配div中第1个子元素
3. $("div:last-child") 匹配div中最后一个子元素

###表单选择器
1. $(":input") 匹配所有的 input中 文本框 密码框 单选，复选框 下拉选 文本域(textarea) button
2. $(":password") 匹配所有密码框
3. $(":radio") 匹配所有单选
4. $(":checkbox")匹配所有复选框
5. $(":checked")匹配所有被选中的 单选/复选/下拉选option
6. $("input:checked")匹配所有被选中的单选和复选
7. $(":selected")匹配所有被选中的下拉选option

##文档操作
1. 创建元素
	var $d = $("<div>abc</div>");
2. 添加元素
- $("#big").append($d); //最后面
- $("#big").prepend($d)；//最前面
3. 插入元素
- 兄弟元素.after($d);//插入到兄弟元素的后面
- 兄弟元素.before($d);//插入到兄弟元素的前面
4. 删除元素
- 通过自己删除 $("#id").remove();
- 先得到所有的li 然后删除里面id为sh的
		 $("li").remove("#sh");
5. 修改样式
	
		$("#id").css("width","40px")//设置宽度
		$("#id").css("width")//获取宽度
6. 属性
		
		$("#id").attr("id","xx")//设置id属性
		$("#id").attr("id") //获取id
7. 文本
		
		$("#id").text("xxx")//设置元素文本
		$("#id").text()//获取文本
8. html
		
		$("#id").html("xxx")//设置元素html代码
		$("#id").html()//获取html代码

#选择器
###基本
1. 标签名
2. id
3. 类
4. 分组
5. *
###层级
1. div span
2. div>span
3. div+span
4. div~span
###层级函数
siblings 所有兄弟
next 弟弟  nextAll所有弟弟 prev哥哥 prevAll哥哥们
###过滤
1. div:first
2. last
3. even
4. odd
5. eq()
6. not()
7. lt()
8. gt()
###内容
1. div:has(p)
2. div:empty
3. div:parent
4. div:contains('a')
###可见
1. div:hidden
2. div:visible
show()  hide() toggle()
###属性
1. div[id]
2. div[id='xx'];
3. div[id!='xx'];
###子元素
1. div:nth-child(n) 1开始
2. div:first-child
3. div:last-child
###表单选择器
1. :input
2. :password
3. :radio
4. :checkbox
5. :checked 单选、多选、下拉选
6. input:checked 单选、多选
7. :selected 下拉选

###文档操作：
1. 创建  var $d = $("<div></div>");
2. 添加  上级.append  上级.prepend()
3. 插入 兄弟.after()  兄弟.before()
4. 删除  元素.remove()  $("li").remove("#id");
5. 样式 元素.css("width","20px")
6. 属性 元素.attr("id","xx")
7. 文本 元素.text()
8. html 元素.html()

---------------------------------------------------------------------------------------------------------------------------------------------------第十三天--------------------------------------------------------------------------------------------------------------------------------------------------------------
课程回顾
###基本选择器
1. 标签名  
2. id   #id
3. 类  .class
4. 分组  标签名，#id，.class
5. 所有  *
###层级选择器
1. div span
2. div>span
3. div+span 
4. div~span
###过滤选择器
1. div:first
2. div:last
3. div:even
4. div:odd
5. div:eq() 0
6. div:not(#id)
7. div:lt()
8. div:gt()
###内容选择器
1. div:has(p)
2. div:empty
3. div:parent
4. div:contains('a')
###可见选择器
1. div:hidden
2. div:visible
函数： show()  hide() toggle()
###属性选择器
1. div[id]
2. div[id='aa']
3. div[id!='aa']
###子元素选择器
1. div:nth-child()  1
2. div:first-child
3. div:last-child 
###表单选择器
1. :input  文本框 密码框 单选 多选 下拉选 文本域
2. ：password
3. ：radio
4. ：checkbox
5. ：checked   单选 多选 下拉选
6. input:checked 单选 多选 
7. :selected  下拉选

##文档相关
1. 创建jq元素 
	var $p = $("<p>abcd</p>"); 
2. 添加元素
	父元素.append($p);
	父元素.prepend($p);
3. 插入元素
	兄弟元素.after($p);
	兄弟元素.before($p);
4. 删除元素
	元素.remove();
	$("div").remove("#id");
5. 样式
	元素.css("width","20px")
6. 属性
	元素.attr("id","xxx");
7. 文本
	元素.text("xxx");
8. html
	元素.html("xxx");


###层级函数
元素.siblings() 所有的兄弟元素
元素.prev() 得到哥哥元素
元素.prevAll() 所有的哥哥元素
元素.next()得到弟弟元素
元素.nextAll()得到所有弟弟元素

元素.parent() 得到上级父元素
元素.children()得到所有的子元素
元素.children().eq(n) 获取第n个子元素
$("div").eq(0) 得到查询结果中的第几个
M元素.children("#aa") 查询M元素中 id为aa的子元素

##员工列表练习步骤：
1. 搭建界面 给按钮添加事件
2. 添加事件里面分别得到三个输入框里面的name age sal
3. 创建tr元素和四个td元素 ，前三个td里面写name,age,sal，第四个添加删除按钮并且给按钮添加事件 
4. 把创建出来的td添加到tr里面 把tr添加到页面中的table里面
5. 当点击删除按钮的时候 获取按钮的上上级 得到tr  然后调用remove函数将tr删除

##jq事件相关
###常用事件
1. click
2. blur 失去焦点
3. focus 得到焦点
4. change 值发生改变
5. ready  页面加载完成 onload  
	$(document).ready(function(){});
	$(function(){});
###在事件中获取事件源的方式
1. 如果元素动态绑定事件，this为事件源
2. 非动态绑定 event.target||event.srcElement
3. 绑定事件时传递this 事件中用变量接收，此变量就是事件源
###事件模拟
	//延时执行
		setTimeout(function(){
			//模拟按钮的点击事件
			$("input").trigger("click");
		},3000);
###事件的合并
1. 切换显示和不显示 toggle();
2. hover(fn1,fn2); 相当于 onmouseover+onmouseout

##动画
1. 显示和隐藏
2. 上滑和下滑
3. 淡入和淡出
4. 自定义 通过修改样式（大小 位置）以动画的形式改变样式
 function fn1(){//显示
		 $("img").show(3000);
	 }
	 function fn2(){//隐藏
		 //第一个参数为动画时间，第二个参数为回调函数
		 $("img").eq(0).hide(3000,function(){
			 $("img").eq(0).show(3000);
		 });
	 }
	 function fn3(){//上滑
		 $("img").eq(1).slideUp(2000);
	 }
	 function fn4(){//下滑
		 $("img").eq(1).slideDown(2000);
	 }
	 function fn5(){//淡入
		 $("img").eq(2).fadeIn(1000);
	 }
	 function fn6(){//淡出
		 $("img").eq(2).fadeOut(1000);
	 }

	 function fn7(){
		 $("img").animate({"left":"250px"},1000)
		 .animate({"top":"250px"},1000)
		 .animate({"left":"0px"},1000)
		 .animate({"top":"0px"},1000)
		 .animate({"width":"300px","height":"250px"},1000)
		 .animate({"width":"200px","height":"150px"},1000);
	 }





